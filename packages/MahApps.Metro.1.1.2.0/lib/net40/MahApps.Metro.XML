<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MahApps.Metro</name>
    </assembly>
    <members>
        <member name="T:MahApps.Metro.Accent">
            <summary>
            An object that represents the foreground color for a Metro <see cref="T:MahApps.Metro.AppTheme"/>.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Accent.Resources">
            <summary>
            The ResourceDictionary that represents this Accent.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Accent.#ctor">
            <summary>
            Initializes a new instance of the MahApps.Metro.Accent class.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Accent.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the MahApps.Metro.Accent class.
            </summary>
            <param name="name">The name of the new Accent.</param>
            <param name="resourceAddress">The URI of the accent ResourceDictionary.</param>
        </member>
        <member name="P:MahApps.Metro.Accent.Name">
            <summary>
            Gets/sets the name of the Accent.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Behaviours.BorderlessWindowBehavior">
            <summary>
            With this class we can make custom window styles.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.Update">
            <summary>
            Updates all glow windows (visible, hidden, collapsed)
            </summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.SetOpacityTo(System.Double)">
            <summary>
            Sets the opacity to all glow windows
            </summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.StartOpacityStoryboard">
            <summary>
            Starts the opacity storyboard 0 -> 1
            </summary>
        </member>
        <member name="M:MahApps.Metro.Behaviours.GlowWindowBehavior.Show">
            <summary>
            Shows all glow windows
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.CustomValidationPopup">
            <summary>
            This custom popup is used by the validation error template.
            It provides some additional nice features:
                - repositioning if host-window size or location changed
                - repositioning if host-window gets maximized and vice versa
                - it's only topmost if the host-window is activated
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.BaseMetroDialog">
             <summary>
             The base class for dialogs.
            
             You probably don't want to use this class, if you want to add arbitrary content to your dialog, 
             use the <see cref="T:MahApps.Metro.Controls.Dialogs.CustomDialog"/> class.
             </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.#ctor(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Initializes a new MahApps.Metro.Controls.BaseMetroDialog.
            </summary>
            <param name="owningWindow">The window that is the parent of the dialog.</param>
            <param name="settings">The settings for the message dialog.</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.#ctor">
            <summary>
            Initializes a new MahApps.Metro.Controls.BaseMetroDialog.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.WaitForLoadAsync">
            <summary>
            Waits for the dialog to become ready for interaction.
            </summary>
            <returns>A task that represents the operation and it's status.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.RequestCloseAsync">
            <summary>
            Requests an externally shown Dialog to close. Will throw an exception if the Dialog is inside of a MetroWindow.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.OnRequestClose">
            <summary>
            A last chance virtual method for stopping an external dialog from closing.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.Title">
            <summary>
            Gets/sets the dialog's title.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.DialogTop">
            <summary>
            Gets/sets arbitrary content on top of the dialog.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.DialogBottom">
            <summary>
            Gets/sets arbitrary content below the dialog.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.ParentDialogWindow">
            <summary>
            Gets the window that owns the current Dialog IF AND ONLY IF the dialog is shown externally.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.BaseMetroDialog.OwningWindow">
            <summary>
            Gets the window that owns the current Dialog IF AND ONLY IF the dialog is shown inside of a window.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MetroDialogSettings">
            <summary>
            A class that represents the settings used by Metro Dialogs.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.AffirmativeButtonText">
            <summary>
            Gets/sets the text used for the Affirmative button. For example: "OK" or "Yes".
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.NegativeButtonText">
            <summary>
            Gets/sets the text used for the Negative button. For example: "Cancel" or "No".
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.ColorScheme">
            <summary>
            Gets/sets whether the metro dialog should use the default black/white appearance (theme) or try to use the current accent.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.AnimateShow">
            <summary>
            Enable/disable dialog showing animation.
            "True" - play showing animation.
            "False" - skip showing animation.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.AnimateHide">
            <summary>
            Enable/disable dialog hiding animation
            "True" - play hiding animation.
            "False" - skip hiding animation.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.DefaultText">
            <summary>
            Gets/sets the default text( just the inputdialog needed)
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.MetroDialogSettings.MaximumBodyHeight">
            <summary>
            Gets/sets the maximum height. (Default is unlimited height, <a href="http://msdn.microsoft.com/de-de/library/system.double.nan">Double.NaN</a>)
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MetroDialogColorScheme">
            <summary>
            An enum representing the different choices for a color scheme in a Metro Dialog.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowLoginAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.LoginDialogSettings)">
            <summary>
            Creates a LoginDialog inside of the current window.
            </summary>
            <param name="window">The window that is the parent of the dialog.</param>
            <param name="title">The title of the LoginDialog.</param>
            <param name="message">The message contained within the LoginDialog.</param>
            <param name="settings">Optional settings that override the global metro dialog settings.</param>
            <returns>The text that was entered or null (Nothing in Visual Basic) if the user cancelled the operation.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowInputAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Creates a InputDialog inside of the current window.
            </summary>
            <param name="window">The MetroWindow</param>
            <param name="title">The title of the MessageDialog.</param>
            <param name="message">The message contained within the MessageDialog.</param>
            <param name="settings">Optional settings that override the global metro dialog settings.</param>
            <returns>The text that was entered or null (Nothing in Visual Basic) if the user cancelled the operation.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowMessageAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Creates a MessageDialog inside of the current window.
            </summary>
            <param name="window">The MetroWindow</param>
            <param name="title">The title of the MessageDialog.</param>
            <param name="message">The message contained within the MessageDialog.</param>
            <param name="style">The type of buttons to use.</param>
            <param name="settings">Optional settings that override the global metro dialog settings.</param>
            <returns>A task promising the result of which button was pressed.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowProgressAsync(MahApps.Metro.Controls.MetroWindow,System.String,System.String,System.Boolean,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Creates a ProgressDialog inside of the current window.
            </summary>
            <param name="window">The MetroWindow</param>
            <param name="title">The title of the ProgressDialog.</param>
            <param name="message">The message within the ProgressDialog.</param>
            <param name="isCancelable">Determines if the cancel button is visible.</param>
            <param name="settings">Optional Settings that override the global metro dialog settings.</param>
            <returns>A task promising the instance of ProgressDialogController for this operation.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Adds a Metro Dialog instance to the specified window and makes it visible.
            <para>Note that this method returns as soon as the dialog is loaded and won't wait on a call of <see cref="M:MahApps.Metro.Controls.Dialogs.DialogManager.HideMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)"/>.</para>
            <para>You can still close the resulting dialog with <see cref="M:MahApps.Metro.Controls.Dialogs.DialogManager.HideMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)"/>.</para>
            </summary>
            <param name="window">The owning window of the dialog.</param>
            <param name="dialog">The dialog instance itself.</param>
            <param name="settings">An optional pre-defined settings instance.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="dialog"/> is already visible in the window.</exception>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.HideMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Hides a visible Metro Dialog instance.
            </summary>
            <param name="window">The window with the dialog that is visible.</param>
            <param name="dialog">The dialog instance to hide.</param>
            <param name="settings">An optional pre-defined settings instance.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            The <paramref name="dialog"/> is not visible in the window.
            This happens if <see cref="M:MahApps.Metro.Controls.Dialogs.DialogManager.ShowMetroDialogAsync(MahApps.Metro.Controls.MetroWindow,MahApps.Metro.Controls.Dialogs.BaseMetroDialog,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)"/> hasn't been called before.
            </exception>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.DialogManager.GetCurrentDialogAsync``1(MahApps.Metro.Controls.MetroWindow)">
            <summary>
            Gets the current shown dialog.
            </summary>
            <param name="window">The dialog owner.</param>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.InputDialog">
            <summary>
            InputDialog
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.InputDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.LoginDialog">
            <summary>
            LoginDialog
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.LoginDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.ProgressDialog">
            <summary>
            An internal control that represents a message dialog. Please use MetroWindow.ShowMessage instead!
            </summary>
            <summary>
            ProgressDialog
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.ProgressDialogController">
            <summary>
            A class for manipulating an open ProgressDialog.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetIndeterminate">
            <summary>
            Sets the ProgressBar's IsIndeterminate to true. To set it to false, call SetProgress.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetCancelable(System.Boolean)">
            <summary>
            Sets if the Cancel button is visible.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetProgress(System.Double)">
            <summary>
            Sets the dialog's progress bar value and sets IsIndeterminate to false.
            </summary>
            <param name="value">The percentage to set as the value.</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetMessage(System.String)">
            <summary>
            Sets the dialog's message content.
            </summary>
            <param name="message">The message to be set.</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.SetTitle(System.String)">
            <summary>
            Sets the dialog's title.
            </summary>
            <param name="title">The title to be set.</param>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.ProgressDialogController.CloseAsync">
            <summary>
            Begins an operation to close the ProgressDialog.
            </summary>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.ProgressDialogController.IsOpen">
            <summary>
            Gets if the wrapped ProgressDialog is open.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Dialogs.ProgressDialogController.IsCanceled">
            <summary>
            Gets if the Cancel button has been pressed.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.CustomDialog">
            <summary>
            An implementation of BaseMetroDialog allowing arbitrary content.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.FlipView">
            <summary>
            A control that imitate a slideshow with back/forward buttons.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlipView.loaded">
            <summary>
            To counteract the double Loaded event issue.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.GoBack">
            <summary>
            Changes the current slide to the previous item.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.GoForward">
            <summary>
            Changes the current to the next item.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.ShowControlButtons">
            <summary>
            Brings the control buttons (next/previous) into view.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.FlipView.HideControlButtons">
            <summary>
            Removes the control buttons (next/previous) from view.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.BannerText">
            <summary>
            Gets/sets the text that is displayed in the FlipView's banner.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlipView.IsBannerEnabled">
            <summary>
            Gets/sets whether the FlipView's banner is visible.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Flyout">
            <summary>
            A sliding panel control that is hosted in a MetroWindow via a FlyoutsControl.
            <see cref="T:MahApps.Metro.Controls.MetroWindow"/>
            <seealso cref="T:MahApps.Metro.Controls.FlyoutsControl"/>
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Flyout.IsOpenChangedEvent">
            <summary>
            An event that is raised when IsOpen changes.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Flyout.ClosingFinishedEvent">
            <summary>
            An event that is raised when the closing animation has finished.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.TitleVisibility">
            <summary>
            Gets/sets if the title is visible in this flyout.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.CloseButtonVisibility">
            <summary>
            Gets/sets if the close button is visible in this flyout.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.CloseCommand">
            <summary>
            An ICommand that executes when the flyout's close button is clicked.
            Note that this won't execute when <see cref="P:MahApps.Metro.Controls.Flyout.IsOpen"/> is set to <c>false</c>.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.HeaderTemplate">
            <summary>
            A DataTemplate for the flyout's header.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.IsOpen">
            <summary>
            Gets/sets whether this flyout is visible.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.AnimateOnPositionChange">
            <summary>
            Gets/sets whether this flyout uses the open/close animation when changing the <see cref="P:MahApps.Metro.Controls.Flyout.Position"/> property. (default is true)
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.AnimateOpacity">
            <summary>
            Gets/sets whether this flyout animates the opacity of the flyout when opening/closing.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.IsPinned">
            <summary>
            Gets/sets whether this flyout stays open when the user clicks outside of it.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.ExternalCloseButton">
            <summary>
            Gets/sets the mouse button that closes the flyout on an external mouse click.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.IsModal">
            <summary>
            Gets/sets whether this flyout is modal.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.Position">
            <summary>
            Gets/sets this flyout's position in the FlyoutsControl/MetroWindow.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.Header">
            <summary>
            Gets/sets the flyout's header.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.Theme">
            <summary>
            Gets or sets the theme of this flyout.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.FocusedElement">
            <summary>
            Gets or sets the focused element.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.Flyout.AllowFocusElement">
            <summary>
            Gets or sets a value indicating whether the flyout should try focus an element.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.FlyoutsControl">
            <summary>
            A FlyoutsControl is for displaying flyouts in a MetroWindow.
            <see cref="T:MahApps.Metro.Controls.MetroWindow"/>
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlyoutsControl.OverrideExternalCloseButton">
            <summary>
            Gets/sets whether <see cref="P:MahApps.Metro.Controls.Flyout.ExternalCloseButton"/> is ignored and all flyouts behave as if it was set to the value of this property.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.FlyoutsControl.OverrideIsPinned">
            <summary>
            Gets/sets whether <see cref="P:MahApps.Metro.Controls.Flyout.IsPinned"/> is ignored and all flyouts behave as if it was set false.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Adapt">
            <summary>
            Adapts the Flyout's theme to the theme of its host window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Inverse">
            <summary>
            Adapts the Flyout's theme to the theme of its host window, but inverted.
            This theme can only be applied if the host window's theme abides the "Dark" and "Light" affix convention.
            (see <see cref="M:MahApps.Metro.ThemeManager.GetInverseAppTheme(MahApps.Metro.AppTheme)"/> for more infos.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Dark">
            <summary>
            The dark theme. This is the default theme.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.FlyoutTheme.Accent">
            <summary>
            The flyouts theme will match the host window's accent color.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.GlowWindow">
            <summary>
            GlowWindow
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.GlowWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MessageDialog">
            <summary>
            An internal control that represents a message dialog. Please use MetroWindow.ShowMessage instead!
            </summary>
            <summary>
            MessageDialog
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.Dialogs.MessageDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MessageDialogResult">
            <summary>
            An enum representing the result of a Message Dialog.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Dialogs.MessageDialogStyle">
            <summary>
            An enum representing the different button states for a Message Dialog.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Dialogs.MessageDialogStyle.Affirmative">
            <summary>
            Just "OK"
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.Dialogs.MessageDialogStyle.AffirmativeAndNegative">
            <summary>
            "OK" and "Cancel"
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ButtonHelper.GetPreserveTextCase(System.Windows.UIElement)">
            <summary>
            Overrides the text case behavior for certain buttons.
            When set to <c>true</c>, the text case will be preserved and won't be changed to upper or lower case.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ButtonHelper.CornerRadiusProperty">
            <summary>
            DependencyProperty for <see cref="T:System.Windows.CornerRadius"/> property.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ButtonHelper.GetCornerRadius(System.Windows.UIElement)">
            <summary> 
            The CornerRadius property allows users to control the roundness of the button corners independently by 
            setting a radius value for each corner. Radius values that are too large are scaled so that they
            smoothly blend from corner to corner. (Can be used e.g. at MetroButton style)
            Description taken from original Microsoft description :-D
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ComboBoxHelper">
            <summary>
            A helper class that provides various attached properties for the ComboBox control.
            <see cref="T:System.Windows.Controls.ComboBox"/>
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ControlsHelper">
            <summary>
            A helper class that provides various controls.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ControlsHelper.ButtonWidthProperty">
            <summary>
            This property can be used to set the button width (PART_ClearText) of TextBox, PasswordBox, ComboBox
            For multiline TextBox, PasswordBox is this the fallback for the clear text button! so it must set manually!
            For normal TextBox, PasswordBox the width is the height. 
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.SetFocusBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the brush used to draw the focus border.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.GetFocusBorderBrush(System.Windows.DependencyObject)">
            <summary>
            Gets the brush used to draw the focus border.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.SetMouseOverBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the brush used to draw the mouse over brush.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ControlsHelper.GetMouseOverBorderBrush(System.Windows.DependencyObject)">
            <summary>
            Gets the brush used to draw the mouse over brush.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.GetSaveDataGrid(System.Windows.UIElement)">
            <summary>
            Save the DataGrid.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.DataGridCellHelper.GetDataGrid(System.Windows.UIElement)">
            <summary>
            Get the DataGrid.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ScrollBarHelper.VerticalScrollBarOnLeftSideProperty">
            <summary>
            This property can be used to set vertical scrollbar left side from the tabpanel (look at MetroAnimatedSingleRowTabControl)
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TabControlHelper.IsUnderlinedProperty">
            <summary>
            Defines whether the underline below the <see cref="T:System.Windows.Controls.TabControl"/> is shown or not.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TabControlHelper.TransitionProperty">
            <summary>
            This property can be used to set the Transition for animated TabControls
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TextBoxHelper">
            <summary>
            A helper class that provides various attached properties for the TextBox control.
            </summary>
            <remarks>
            Password watermarking code from: http://prabu-guru.blogspot.com/2010/06/how-to-add-watermark-text-to-textbox.html
            </remarks>
        </member>
        <member name="F:MahApps.Metro.Controls.TextBoxHelper.IsClearTextButtonBehaviorEnabledProperty">
            <summary>
            The clear text button behavior property. It sets a click event to the button if the value is true.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetIsSpellCheckContextMenuEnabled(System.Windows.UIElement)">
            <summary>
            Indicates if a TextBox or RichTextBox should use SpellCheck context menu
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetHasText(System.Windows.DependencyObject)">
            <summary>
            Gets if the attached TextBox has text.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.GetIsClearTextButtonBehaviorEnabled(System.Windows.Controls.Button)">
            <summary>
            Gets the clear text button behavior.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TextBoxHelper.SetIsClearTextButtonBehaviorEnabled(System.Windows.Controls.Button,System.Boolean)">
            <summary>
            Sets the clear text button behavior.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.ToggleButtonHelper.ContentDirectionProperty">
            <summary>
            This property can be used to handle the style for CheckBox and RadioButton
            LeftToRight means content left and button right and RightToLeft vise versa
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.ToggleButtonHelper.GetContentDirection(System.Windows.UIElement)">
            <summary>
            This property can be used to handle the style for CheckBox and RadioButton
            LeftToRight means content left and button right and RightToLeft vise versa
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroAnimatedSingleRowTabControl">
            <summary>
            A MetroTabControl (Pivot) that wraps TabItem/MetroTabItem headers on a single row.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.BaseMetroTabControl">
            <summary>
            A base class for every MetroTabControl (Pivot).
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.BaseMetroTabControl.CloseTabCommand">
            <summary>
            Get/sets the command that executes when a MetroTabItem's close button is clicked.
            </summary>
        </member>
        <member name="E:MahApps.Metro.Controls.BaseMetroTabControl.TabItemClosingEvent">
            <summary>
            An event that is raised when a TabItem is closed.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.BaseMetroTabControl.TabItemClosingEventArgs">
            <summary>
            Event args that is created when a TabItem is closed.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.BaseMetroTabControl.TabItemClosingEventArgs.ClosingTabItem">
            <summary>
            Gets the MetroTabItem that will be closed.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroAnimatedSingleRowTabControl.#ctor">
            <summary>
            Initializes a new instance of the MahApps.Metro.Controls.MetroAnimatedSingleRowTabControl class.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroAnimatedTabControl">
            <summary>
            A MetroTabControl (Pivot) that uses a TransitioningContentControl to animate the contents of a TabItem/MetroTabItem.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroAnimatedTabControl.#ctor">
            <summary>
            Initializes a new instance of the MahApps.Metro.Controls.MetroAnimatedTabControl class.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroNavigationWindow">
            <summary>
            A reimplementation of NavigationWindow based on MetroWindow.
            </summary>
            <see cref="T:System.Windows.Navigation.NavigationWindow"/>
            <summary>
            MetroNavigationWindow
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroWindow">
            <summary>
            An extended, metrofied Window class.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.GetWindowPlacementSettings">
            <summary>
            Gets the window placement settings (can be overwritten).
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.ShowOverlayAsync">
            <summary>
            Begins to show the MetroWindow's overlay effect.
            </summary>
            <returns>A task representing the process.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.HideOverlayAsync">
            <summary>
            Begins to hide the MetroWindow's overlay effect.
            </summary>
            <returns>A task representing the process.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindow.#ctor">
            <summary>
            Initializes a new instance of the MahApps.Metro.Controls.MetroWindow class.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.OverrideDefaultWindowCommandsBrush">
            <summary>
            CleanWindow sets this so it has the correct default window commands brush
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowMinButtonStyle">
            <summary>
            Gets/sets the style for the MIN button style.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowMaxButtonStyle">
            <summary>
            Gets/sets the style for the MAX button style.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowCloseButtonStyle">
            <summary>
            Gets/sets the style for the CLOSE button style.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowTransitionsEnabled">
            <summary>
            Gets/sets whether the window's entrance transition animation is enabled.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.Flyouts">
            <summary>
            Gets/sets the FlyoutsControl that hosts the window's flyouts.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IconTemplate">
            <summary>
            Gets/sets the icon content template to show a custom icon.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleTemplate">
            <summary>
            Gets/sets the title content template to show a custom title.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.LeftWindowCommands">
            <summary>
            Gets/sets the left window commands that hosts the user commands.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.RightWindowCommands">
            <summary>
            Gets/sets the right window commands that hosts the user commands.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IgnoreTaskbarOnMaximize">
            <summary>
            Gets/sets whether the window will ignore (and overlap) the taskbar when maximized.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleForeground">
            <summary>
            Gets/sets the brush used for the titlebar's foreground.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.SaveWindowPosition">
            <summary>
            Gets/sets whether the window will save it's position between loads.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowIconOnTitleBar">
            <summary>
            Get/sets whether the titlebar icon is visible or not.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IconEdgeMode">
            <summary>
            Gets/sets edge mode of the titlebar icon.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IconBitmapScalingMode">
            <summary>
            Gets/sets bitmap scaling mode of the titlebar icon.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowTitleBar">
            <summary>
            Gets/sets whether the TitleBar is visible or not.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.UseNoneWindowStyle">
            <summary>
            Gets/sets whether the WindowStyle is None or not.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowMinButton">
            <summary>
            Gets/sets if the minimize button is visible.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowMaxRestoreButton">
            <summary>
            Gets/sets if the Maximize/Restore button is visible.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowCloseButton">
            <summary>
            Gets/sets if the close button is visible.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IsMinButtonEnabled">
            <summary>
            Gets/sets if the min button is enabled.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IsMaxRestoreButtonEnabled">
            <summary>
            Gets/sets if the max/restore button is enabled.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.IsCloseButtonEnabled">
            <summary>
            Gets/sets if the close button is enabled.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.ShowSystemMenuOnRightClick">
            <summary>
            Gets/sets if the the system menu should popup on right click.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitlebarHeight">
            <summary>
            Gets/sets the TitleBar's height.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.TitleCaps">
            <summary>
            Gets/sets if the TitleBar's text is automatically capitalized.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowTitleBrush">
            <summary>
            Gets/sets the brush used for the Window's title bar.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.GlowBrush">
            <summary>
            Gets/sets the brush used for the Window's glow.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.NonActiveGlowBrush">
            <summary>
            Gets/sets the brush used for the Window's non-active glow.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.NonActiveBorderBrush">
            <summary>
            Gets/sets the brush used for the Window's non-active border.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.NonActiveWindowTitleBrush">
            <summary>
            Gets/sets the brush used for the Window's non-active title bar.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroWindow.WindowTitle">
            <summary>
            Gets/sets the TitleBar/Window's Text.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.AddBackEntry(System.Windows.Navigation.CustomContentState)">
            <summary>
            Adds an entry to back navigation history that contains a CustomContentState object.
            </summary>
            <param name="state">A CustomContentState object that represents application-defined state that is associated with a specific piece of content.</param>
            <see cref="M:System.Windows.Navigation.NavigationWindow.AddBackEntry(System.Windows.Navigation.CustomContentState)"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.RemoveBackEntry">
            <summary>
            Removes the most recent journal entry from back history.
            </summary>
            <returns>The most recent JournalEntry in back navigation history, if there is one.</returns>
            <see cref="M:System.Windows.Navigation.NavigationWindow.RemoveBackEntry"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.GoBack">
            <summary>
            Navigates to the most recent item in back navigation history.
            </summary>
            <see cref="M:System.Windows.Navigation.NavigationWindow.GoBack"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.GoForward">
            <summary>
            Navigates to the most recent item in forward navigation history.
            </summary>
            <see cref="M:System.Windows.Navigation.NavigationWindow.GoForward"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Object)">
            <summary>
            Navigates asynchronously to content that is contained by an object.
            </summary>
            <param name="content">An Object that contains the content to navigate to.</param>
            <returns>true if a navigation is not canceled; otherwise, false.</returns>
            <see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Object)"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Uri)">
            <summary>
            Navigates asynchronously to content that is specified by a uniform resource identifier (URI).
            </summary>
            <param name="source">A Uri object initialized with the URI for the desired content.</param>
            <returns>true if a navigation is not canceled; otherwise, false.</returns>
            <see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Uri)"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Object,System.Object)">
            <summary>
            Navigates asynchronously to content that is contained by an object, and passes an object that contains data to be used for processing during navigation.
            </summary>
            <param name="content">An Object that contains the content to navigate to.</param>
            <param name="extraData">A Object that contains data to be used for processing during navigation.</param>
            <returns>true if a navigation is not canceled; otherwise, false.</returns>
            <see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Object,System.Object)"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.Navigate(System.Uri,System.Object)">
            <summary>
            Navigates asynchronously to source content located at a uniform resource identifier (URI), and pass an object that contains data to be used for processing during navigation.
            </summary>
            <param name="source">A Uri object initialized with the URI for the desired content.</param>
            <param name="extraData">A Object that contains data to be used for processing during navigation.</param>
            <returns>true if a navigation is not canceled; otherwise, false.</returns>
            <see cref="M:System.Windows.Navigation.NavigationWindow.Navigate(System.Uri,System.Object)"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.StopLoading">
            <summary>
            Stops further downloading of content for the current navigation request.
            </summary>
            <see cref="M:System.Windows.Navigation.NavigationWindow.StopLoading"/>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroNavigationWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.ForwardStack">
            <summary>
            Gets an IEnumerable that you use to enumerate the entries in back navigation history for a NavigationWindow.
            </summary>
            <see cref="P:System.Windows.Navigation.NavigationWindow.ForwardStack"/>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.BackStack">
            <summary>
            Gets an IEnumerable that you use to enumerate the entries in back navigation history for a NavigationWindow.
            </summary>
            <see cref="P:System.Windows.Navigation.NavigationWindow.BackStack"/>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.NavigationService">
            <summary>
            Gets the NavigationService that is used by this MetroNavigationWindow to provide navigation services to its content.
            </summary>
            <see cref="P:System.Windows.Navigation.NavigationWindow.NavigationService"/>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.CanGoBack">
            <summary>
            Gets a value that indicates whether there is at least one entry in back navigation history.
            </summary>
            <see cref="P:System.Windows.Navigation.NavigationWindow.CanGoBack"/>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.CanGoForward">
            <summary>
            Gets a value that indicates whether there is at least one entry in forward navigation history.
            </summary>
            <see cref="P:System.Windows.Navigation.NavigationWindow.CanGoForward"/>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.System#Windows#Markup#IUriContext#BaseUri">
            <summary>
            Gets or sets the base uniform resource identifier (URI) of the current context.
            </summary>
            <see cref="P:System.Windows.Markup.IUriContext.BaseUri"/>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroNavigationWindow.Source">
            <summary>
            Gets or sets the uniform resource identifier (URI) of the current content, or the URI of new content that is currently being navigated to.  
            </summary>
            <see cref="P:System.Windows.Navigation.NavigationWindow.Source"/>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.FragmentNavigation">
            <summary>
            Occurs when navigation to a content fragment begins, which occurs immediately, if the desired fragment is in the current content, or after the source XAML content has been loaded, if the desired fragment is in different content.
            </summary>
            <see cref="E:System.Windows.Navigation.NavigationWindow.FragmentNavigation"/>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.Navigating">
            <summary>
            Occurs when a new navigation is requested.
            </summary>
            <see cref="E:System.Windows.Navigation.NavigationWindow.Navigating"/>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.NavigationFailed">
            <summary>
            Occurs when an error is raised while navigating to the requested content.
            </summary>
            <see cref="E:System.Windows.Navigation.NavigationWindow.NavigationFailed"/>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.NavigationProgress">
            <summary>
            Occurs periodically during a download to provide navigation progress information.
            </summary>
            <see cref="E:System.Windows.Navigation.NavigationWindow.NavigationProgress"/>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.NavigationStopped">
            <summary>
            Occurs when the StopLoading method is called, or when a new navigation is requested while a current navigation is in progre
            </summary>
            <see cref="E:System.Windows.Navigation.NavigationWindow.NavigationStopped"/>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.Navigated">
            <summary>
            Occurs when the content that is being navigated to has been found, and is available from the PageContent property, although it may not have completed loading
            </summary>
            <see cref="E:System.Windows.Navigation.NavigationWindow.Navigated"/>
        </member>
        <member name="E:MahApps.Metro.Controls.MetroNavigationWindow.LoadCompleted">
            <summary>
            Occurs when content that was navigated to has been loaded, parsed, and has begun rendering.
            </summary>
            <see cref="E:System.Windows.Navigation.NavigationWindow.LoadCompleted"/>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroProgressBar">
            <summary>
            A metrofied ProgressBar.
            <see cref="T:System.Windows.Controls.ProgressBar"/>
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroProgressBar.EllipseDiameter">
            <summary>
            Gets/sets the diameter of the ellipses used in the indeterminate animation.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroProgressBar.EllipseOffset">
            <summary>
            Gets/sets the offset of the ellipses used in the indeterminate animation.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroTabControl">
            <summary>
            A standard MetroTabControl (Pivot).
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroTabControl.#ctor">
            <summary>
            Initializes a new instance of the MahApps.Metro.Controls.MetroTabControl class.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroTabItem">
            <summary>
            An extended TabItem with a metro style.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroTabItem.CloseButtonEnabled">
            <summary>
            Gets/sets whether the Close Button is visible.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.MetroTabItem.CloseTabCommand">
            <summary>
            Gets/sets the command that is executed when the Close Button is clicked.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroWindowHelpers">
            <summary>
            This class eats little children.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindowHelpers.SetIsHitTestVisibleInChromeProperty``1(MahApps.Metro.Controls.MetroWindow,System.String)">
            <summary>
            Sets the IsHitTestVisibleInChromeProperty to a MetroWindow template child
            </summary>
            <param name="window">The MetroWindow</param>
            <param name="name">The name of the template child</param>
        </member>
        <member name="M:MahApps.Metro.Controls.MetroWindowHelpers.HandleWindowCommandsForFlyouts(MahApps.Metro.Controls.MetroWindow,System.Collections.Generic.IEnumerable{MahApps.Metro.Controls.Flyout},System.Windows.Media.Brush)">
            <summary>
            Adapts the WindowCommands to the theme of the first opened, topmost &amp;&amp; (top || right || left) flyout
            </summary>
            <param name="window">The MetroWindow</param>
            <param name="flyouts">All the flyouts! Or flyouts that fall into the category described in the summary.</param>
            <param name="resetBrush">An optional brush to reset the window commands brush to.</param>
        </member>
        <member name="T:MahApps.Metro.Controls.NumericUpDown">
            <summary>
                Represents a Windows spin box (also known as an up-down control) that displays numeric values.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.NumericUpDown.OnApplyTemplate">
            <summary>
                When overridden in a derived class, is invoked whenever application code or internal processes call
                <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.NumericUpDown.OnValueChanged(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
                Raises the <see cref="E:MahApps.Metro.Controls.NumericUpDown.ValueChanged"/> routed event.
            </summary>
            <param name="oldValue">
                Old value of the <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value"/> property
            </param>
            <param name="newValue">
                New value of the <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value"/> property
            </param>
        </member>
        <member name="E:MahApps.Metro.Controls.NumericUpDown.MaximumReached">
            <summary>
                Event fired from this NumericUpDown when its value has reached the maximum value
            </summary>
        </member>
        <member name="E:MahApps.Metro.Controls.NumericUpDown.MinimumReached">
            <summary>
                Event fired from this NumericUpDown when its value has reached the minimum value
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.Delay">
            <summary>
                Gets or sets the amount of time, in milliseconds, the NumericUpDown waits while the up/down button is pressed
                before it starts increasing/decreasing the
                <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value"/> for the specified <see cref="P:MahApps.Metro.Controls.NumericUpDown.Interval"/> . The value must be
                non-negative.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.InterceptArrowKeys">
            <summary>
                Gets or sets a value indicating whether the user can use the arrow keys <see cref="F:System.Windows.Input.Key.Up"/> and <see cref="F:System.Windows.Input.Key.Down"/> to change values. 
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.InterceptMouseWheel">
            <summary>
                Gets or sets a value indicating whether the user can use the mouse wheel to change values.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.TrackMouseWheelWhenMouseOver">
            <summary>
                Gets or sets a value indicating whether the control must have the focus in order to change values using the mouse wheel.
            <remarks>
                If the value is true then the value changes when the mouse wheel is over the control. If the value is false then the value changes only if the control has the focus. If <see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptMouseWheel"/> is set to "false" then this property has no effect.
            </remarks>
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.InterceptManualEnter">
            <summary>
                Gets or sets a value indicating whether the user can enter text in the control.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.HideUpDownButtons">
            <summary>
                Gets or sets a value indicating whether the +/- button of the control is visible.
            </summary>
            <remarks>
                If the value is false then the <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value"/> of the control can be changed only if one of the following cases is satisfied:
                <list type="bullet">
                    <item>
                        <description><see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptArrowKeys"/> is true.</description>
                    </item>
                    <item>
                        <description><see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptMouseWheel"/> is true.</description>
                    </item>
                    <item>
                        <description><see cref="P:MahApps.Metro.Controls.NumericUpDown.InterceptManualEnter"/> is true.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.IsReadOnly">
            <summary>
                Gets or sets a value indicating whether the text can be changed by the use of the up or down buttons only.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.Speedup">
            <summary>
                Gets or sets a value indicating whether the value to be added to or subtracted from <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value"/> remains
                always
                <see cref="P:MahApps.Metro.Controls.NumericUpDown.Interval"/> or if it will increase faster after pressing the up/down button/arrow some time.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.StringFormat">
            <summary>
                Gets or sets the formatting for the displaying <see cref="P:MahApps.Metro.Controls.NumericUpDown.Value"/>
            </summary>
            <remarks>
                <see href="http://msdn.microsoft.com/en-us/library/dwhawy9k.aspx"></see>
            </remarks>
        </member>
        <member name="P:MahApps.Metro.Controls.NumericUpDown.TextAlignment">
            <summary>
                Gets or sets the horizontal alignment of the contents of the text box.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Position">
            <summary>
            An Enum representing different positions, such as Left or Right.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.PropertyChangeNotifier">
            <summary>
            AddValueChanged of dependency property descriptor results in memory leak as you already know.
            So, as described here, you can create custom class PropertyChangeNotifier to listen
            to any dependency property changes.
            
            This class takes advantage of the fact that bindings use weak references to manage associations
            so the class will not root the object who property changes it is watching. It also uses a WeakReference
            to maintain a reference to the object whose property it is watching without rooting that object.
            In this way, you can maintain a collection of these objects so that you can unhook the property
            change later without worrying about that collection rooting the object whose values you are watching.
            
            Complete implementation can be found here: http://agsmith.wordpress.com/2008/04/07/propertydescriptor-addvaluechanged-alternative/
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.PropertyChangeNotifier.ValueProperty">
            <summary>
            Identifies the <see cref="P:MahApps.Metro.Controls.PropertyChangeNotifier.Value"/> dependency property
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.PropertyChangeNotifier.Value">
            <summary>
            Returns/sets the value of the property
            </summary>
            <seealso cref="F:MahApps.Metro.Controls.PropertyChangeNotifier.ValueProperty"/>
        </member>
        <member name="T:MahApps.Metro.Controls.SplitButton">
            <summary>
                &lt;MyNamespace:CustomControl1/&gt;
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowCommands.ShowSeparators">
            <summary>
            Gets or sets the value indicating whether to show the separators.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.WindowCommandsOverlayBehavior.Never">
            <summary>
            Doesn't overlay flyouts nor a hidden TitleBar.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.WindowCommandsOverlayBehavior.Flyouts">
            <summary>
            Overlays opened <see cref="T:MahApps.Metro.Controls.Flyout"/> controls.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.WindowCommandsOverlayBehavior.HiddenTitleBar">
            <summary>
            Overlays a hidden TitleBar.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Converters.BackgroundToForegroundConverter.IdealTextColor(System.Windows.Media.Color)">
            <summary>
            Determining Ideal Text Color Based on Specified Background Color
            http://www.codeproject.com/KB/GDI-plus/IdealTextColor.aspx
            </summary>
            <param name = "bg">The bg.</param>
            <returns></returns>
        </member>
        <member name="T:MahApps.Metro.Converters.IsNullConverter">
            <summary>
            Converts the value from true to false and false to true.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.Planerator">
            <summary>
              Based on Greg Schechter's Planerator
              http://blogs.msdn.com/b/greg_schechter/archive/2007/10/26/enter-the-planerator-dead-simple-3d-in-wpf-with-a-stupid-name.aspx
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.RangeSelectionChangedEventArgs">
            <summary>
            Event arguments created for the RangeSlider's SelectionChanged event.
            <see cref="T:MahApps.Metro.Controls.RangeSlider"/>
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSelectionChangedEventArgs.NewLowerValue">
            <summary>
            The value of the new range's beginning.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSelectionChangedEventArgs.NewUpperValue">
            <summary>
            The value of the new range's ending.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.RangeSlider">
            <summary>
            A slider control with the ability to select a range between two values.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.RangeSlider.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Responds to a change in the value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property.
            </summary>
            <param name="oldMinimum">The old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property.</param><param name="newMinimum">The new value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property.</param>
        </member>
        <member name="M:MahApps.Metro.Controls.RangeSlider.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Responds to a change in the value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> property.
            </summary>
            <param name="oldMaximum">The old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> property.</param><param name="newMaximum">The new value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> property.</param>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.Interval">
            <summary>
            Get/sets value how fast thumbs will move when user press on left/right/central with left mouse button (IsMoveToPoint must be set to FALSE)
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.AutoToolTipPrecision">
            <summary>
            Get/sets precision of the value, which displaying inside AutotToolTip
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.AutoToolTipPlacement">
            <summary>
            Get/sets tooltip, which will show while dragging thumbs and display currect value
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.TickPlacement">
            <summary>
            Get/sets tick placement position
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.IsMoveToPointEnabled">
            <summary>
            Get/sets IsMoveToPoint feature which will enable/disable moving to exact point inside control when user clicked on it
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.TickFrequency">
            <summary>
            Get/sets tickFrequency
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.Orientation">
            <summary>
            Get/sets orientation of range slider
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.IsSnapToTickEnabled">
            <summary>
            Get/sets whether possibility to make manipulations inside range with left/right mouse buttons + cotrol button
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.ExtendedMode">
            <summary>
            Get/sets whether possibility to make manipulations inside range with left/right mouse buttons + cotrol button
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.MoveWholeRange">
            <summary>
            Get/sets whether whole range will be moved when press on right/left/central part of control
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.MinRangeWidth">
            <summary>
            Get/sets the minimal distance between two thumbs.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.LowerValue">
            <summary>
            Get/sets the beginning of the range selection.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.UpperValue">
            <summary>
            Get/sets the end of the range selection.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.RangeSlider.MinRange">
            <summary>
            Get/sets the minimum range that can be selected.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ToggleSwitchButton">
            <summary>
            A Button that allows the user to toggle between two states.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitchButton.SwitchForeground">
            <summary>
            Gets/sets the brush used for the control's foreground.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TransitionType">
            <summary>
            enumeration for the different transition types
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Default">
            <summary>
            Use the VisualState DefaultTransition
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Normal">
            <summary>
            Use the VisualState Normal
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Up">
            <summary>
            Use the VisualState UpTransition
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Down">
            <summary>
            Use the VisualState DownTransition
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Right">
            <summary>
            Use the VisualState RightTransition
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.RightReplace">
            <summary>
            Use the VisualState RightReplaceTransition
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Left">
            <summary>
            Use the VisualState LeftTransition
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.LeftReplace">
            <summary>
            Use the VisualState LeftReplaceTransition
            </summary>
        </member>
        <member name="F:MahApps.Metro.Controls.TransitionType.Custom">
            <summary>
            Use a custom VisualState, the name must be set using CustomVisualStatesName property
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TransitioningContentControl">
            <summary>
            A ContentControl that animates content as it loads and unloads.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TransitioningContentControl.ReloadTransition">
            <summary>
            Reload the current transition if the content is the same.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.TransitioningContentControl.CustomVisualStatesName">
            <summary>
            Gets or sets the name of the custom transition visual state.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.TransitioningContentControl.IsTransitioning">
            <summary>
            Gets/sets if the content is transitioning.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.TreeHelper">
            <summary>
            Helper methods for UI-related tasks.
            This class was obtained from Philip Sumi (a fellow WPF Disciples blog)
            http://www.hardcodet.net/uploads/2009/06/UIHelper.cs
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.TryFindParent``1(System.Windows.DependencyObject)">
            <summary>
            Finds a parent of a given item on the visual tree.
            </summary>
            <typeparam name="T">The type of the queried item.</typeparam>
            <param name="child">A direct or indirect child of the
            queried item.</param>
            <returns>The first parent item that matches the submitted
            type parameter. If not matching item can be found, a null
            reference is being returned.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.FindChild``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds a Child of a given item in the visual tree. 
            </summary>
            <param name="parent">A direct parent of the queried item.</param>
            <typeparam name="T">The type of the queried item.</typeparam>
            <param name="childName">x:Name or Name of child. </param>
            <returns>The first parent item that matches the submitted type parameter. 
            If not matching item can be found, 
            a null parent is being returned.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.GetParentObject(System.Windows.DependencyObject)">
            <summary>
            This method is an alternative to WPF's
            <see cref="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)"/> method, which also
            supports content elements. Keep in mind that for content element,
            this method falls back to the logical tree of the element!
            </summary>
            <param name="child">The item to be processed.</param>
            <returns>The submitted item's parent, if available. Otherwise
            null.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.FindChildren``1(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Analyzes both visual and logical tree in order to find all elements of a given
            type that are descendants of the <paramref name="source"/> item.
            </summary>
            <typeparam name="T">The type of the queried items.</typeparam>
            <param name="source">The root element that marks the source of the search. If the
            source is already of the requested type, it will not be included in the result.</param>
            <param name="forceUsingTheVisualTreeHelper">Sometimes it's better to search in the VisualTree (e.g. in tests)</param>
            <returns>All descendants of <paramref name="source"/> that match the requested type.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.GetChildObjects(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            This method is an alternative to WPF's
            <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)"/> method, which also
            supports content elements. Keep in mind that for content elements,
            this method falls back to the logical tree of the element.
            </summary>
            <param name="parent">The item to be processed.</param>
            <param name="forceUsingTheVisualTreeHelper">Sometimes it's better to search in the VisualTree (e.g. in tests)</param>
            <returns>The submitted item's child elements, if available.</returns>
        </member>
        <member name="M:MahApps.Metro.Controls.TreeHelper.TryFindFromPoint``1(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Tries to locate a given item within the visual tree,
            starting with the dependency object at a given position. 
            </summary>
            <typeparam name="T">The type of the element to be found
            on the visual tree of the element at the given location.</typeparam>
            <param name="reference">The main element which is used to perform
            hit testing.</param>
            <param name="point">The position to be evaluated on the origin.</param>
        </member>
        <member name="F:Standard.IID.ApplicationAssociationRegistration">
            <summary>IID_IApplicationAssociationRegistration</summary>
        </member>
        <member name="F:Standard.IID.ConnectionPoint">
            <summary>IID_IConnectionPoint</summary>
        </member>
        <member name="F:Standard.IID.ConnectionPointContainer">
            <summary>IID_IConnectionPointContainer</summary>
        </member>
        <member name="F:Standard.IID.EnumConnectionPoints">
            <summary>IID_IEnumConnectionPoints</summary>
        </member>
        <member name="F:Standard.IID.EnumConnections">
            <summary>IID_IEnumConnections</summary>
        </member>
        <member name="F:Standard.IID.EnumIdList">
            <summary>IID_IEnumIDList</summary>
        </member>
        <member name="F:Standard.IID.EnumObjects">
            <summary>IID_IEnumObjects</summary>
        </member>
        <member name="F:Standard.IID.FileDialog">
            <summary>IID_IFileDialog</summary>
        </member>
        <member name="F:Standard.IID.FileDialogEvents">
            <summary>IID_IFileDialogEvents</summary>
        </member>
        <member name="F:Standard.IID.FileOpenDialog">
            <summary>IID_IFileOpenDialog</summary>
        </member>
        <member name="F:Standard.IID.FileSaveDialog">
            <summary>IID_IFileSaveDialog</summary>
        </member>
        <member name="F:Standard.IID.HtmlDocument">
            <summary>IID_IHTMLDocument</summary>
        </member>
        <member name="F:Standard.IID.HtmlDocument2">
            <summary>IID_IHTMLDocument2</summary>
        </member>
        <member name="F:Standard.IID.ModalWindow">
            <summary>IID_IModalWindow</summary>
        </member>
        <member name="F:Standard.IID.ObjectArray">
            <summary>IID_IObjectArray</summary>
        </member>
        <member name="F:Standard.IID.ObjectCollection">
            <summary>IID_IObjectCollection</summary>
        </member>
        <member name="F:Standard.IID.PropertyNotifySink">
            <summary>IID_IPropertyNotifySink</summary>
        </member>
        <member name="F:Standard.IID.PropertyStore">
            <summary>IID_IPropertyStore</summary>
        </member>
        <member name="F:Standard.IID.ServiceProvider">
            <summary>IID_IServiceProvider</summary>
        </member>
        <member name="F:Standard.IID.ShellFolder">
            <summary>IID_IShellFolder</summary>
        </member>
        <member name="F:Standard.IID.ShellLink">
            <summary>IID_IShellLink</summary>
        </member>
        <member name="F:Standard.IID.ShellItem">
            <summary>IID_IShellItem</summary>
        </member>
        <member name="F:Standard.IID.ShellItem2">
            <summary>IID_IShellItem2</summary>
        </member>
        <member name="F:Standard.IID.ShellItemArray">
            <summary>IID_IShellItemArray</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList">
            <summary>IID_ITaskbarList</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList2">
            <summary>IID_ITaskbarList2</summary>
        </member>
        <member name="F:Standard.IID.Unknown">
            <summary>IID_IUnknown</summary>
        </member>
        <member name="F:Standard.IID.WebBrowser2">
            <summary>IID_IWebBrowser2</summary>
        </member>
        <member name="F:Standard.IID.WebBrowserEvents">
            <summary>DIID_DWebBrowserEvents</summary>
        </member>
        <member name="F:Standard.IID.WebBrowserEvents2">
            <summary>IID_DWebBrowserEvents2</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapDecoder">
            <summary>IID_IWICBitmapDecoder</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapFlipRotator">
            <summary>IID_IWICBitmapFlipRotator</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapFrameDecode">
            <summary>IID_IWICBitmapFrameDecode</summary>
        </member>
        <member name="F:Standard.IID.WICBitmap">
            <summary>IID_IWICBitmap</summary>
        </member>
        <member name="F:Standard.IID.WICBitmapSource">
            <summary>IID_IWICBitmapSource</summary>
        </member>
        <member name="F:Standard.IID.WICFormatConverter">
            <summary>IID_IWICFormatConverter</summary>
        </member>
        <member name="F:Standard.IID.WICImagingFactory">
            <summary>IID_IWICImagingFactory</summary>
        </member>
        <member name="F:Standard.IID.WICStream">
            <summary>IID_IWICStream</summary>
        </member>
        <member name="F:Standard.IID.ApplicationDestinations">
            <summary>IID_IApplicationDestinations</summary>
        </member>
        <member name="F:Standard.IID.ApplicationDocumentLists">
            <summary>IID_IApplicationDocumentLists</summary>
        </member>
        <member name="F:Standard.IID.CustomDestinationList">
            <summary>IID_ICustomDestinationList</summary>
        </member>
        <member name="F:Standard.IID.ObjectWithAppUserModelId">
            <summary>IID_IObjectWithAppUserModelID</summary>
        </member>
        <member name="F:Standard.IID.ObjectWithProgId">
            <summary>IID_IObjectWithProgID</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList3">
            <summary>IID_ITaskbarList3</summary>
        </member>
        <member name="F:Standard.IID.TaskbarList4">
            <summary>IID_ITaskbarList4</summary>
        </member>
        <member name="F:Standard.SID.SWebBrowserApp">
            <summary>SID_SWebBrowserApp</summary>
        </member>
        <member name="F:Standard.CLSID.ApplicationAssociationRegistration">
            <summary>CLSID_ApplicationAssociationRegistration</summary>
            <remarks>IID_IApplicationAssociationRegistration</remarks>
        </member>
        <member name="F:Standard.CLSID.DragDropHelper">
            <summary>CLSID_DragDropHelper</summary>
        </member>
        <member name="F:Standard.CLSID.FileOpenDialog">
            <summary>CLSID_FileOpenDialog</summary>
            <remarks>IID_IFileOpenDialog</remarks>
        </member>
        <member name="F:Standard.CLSID.FileSaveDialog">
            <summary>CLSID_FileSaveDialog</summary>
            <remarks>IID_IFileSaveDialog</remarks>
        </member>
        <member name="F:Standard.CLSID.TaskbarList">
            <summary>CLSID_TaskbarList</summary>
            <remarks>IID_ITaskbarList</remarks>
        </member>
        <member name="F:Standard.CLSID.EnumerableObjectCollection">
            <summary>CLSID_EnumerableObjectCollection</summary>
            <remarks>IID_IEnumObjects.</remarks>
        </member>
        <member name="F:Standard.CLSID.ShellLink">
            <summary>CLSID_ShellLink</summary>
            <remarks>IID_IShellLink</remarks>
        </member>
        <member name="F:Standard.CLSID.WICImagingFactory">
            <summary>CLSID_WICImagingFactory</summary>
        </member>
        <member name="F:Standard.CLSID.DestinationList">
            <summary>CLSID_DestinationList</summary>
            <remarks>IID_ICustomDestinationList</remarks>
        </member>
        <member name="F:Standard.CLSID.ApplicationDestinations">
            <summary>CLSID_ApplicationDestinations</summary>
            <remarks>IID_IApplicationDestinations</remarks>
        </member>
        <member name="F:Standard.CLSID.ApplicationDocumentLists">
            <summary>CLSID_ApplicationDocumentLists</summary>
            <remarks>IID_IApplicationDocumentLists</remarks>
        </member>
        <member name="T:Standard.Assert">
            <summary>A static class for verifying assumptions.</summary>
        </member>
        <member name="M:Standard.Assert.Evaluate(Standard.Assert.EvaluateFunction)">
            <summary>
            Executes the specified argument.
            </summary>
            <param name="argument">The function to execute.</param>
        </member>
        <member name="M:Standard.Assert.Equals``1(``0,``0)">
            <summary>Obsolete: Use Standard.Assert.AreEqual instead of Assert.Equals</summary>
            <typeparam name="T">The generic type to compare for equality.</typeparam>
            <param name="expected">The first generic type data to compare.  This is is the expected value.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
        </member>
        <member name="M:Standard.Assert.AreEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are equal.  The assertion fails if they are not.
            </summary>
            <typeparam name="T">The generic type to compare for equality.</typeparam>
            <param name="expected">The first generic type data to compare.  This is is the expected value.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Verifies that two generic type data are not equal.  The assertion fails if they are.
            </summary>
            <typeparam name="T">The generic type to compare for inequality.</typeparam>
            <param name="notExpected">The first generic type data to compare.  This is is the value that's not expected.</param>
            <param name="actual">The second generic type data to compare.  This is the actual value.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.Implies(System.Boolean,System.Boolean)">
            <summary>
            Verifies that if the specified condition is true, then so is the result.
            The assertion fails if the condition is true but the result is false.
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="result">
            A second Boolean statement.  If the first was true then so must this be.
            If the first statement was false then the value of this is ignored.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.Implies(System.Boolean,Standard.Assert.ImplicationFunction)">
            <summary>
            Lazy evaluation overload.  Verifies that if a condition is true, then so is a secondary value.
            </summary>
            <param name="condition">The conditional value.</param>
            <param name="result">A function to be evaluated for truth if the condition argument is true.</param>
            <remarks>
            This overload only evaluates the result if the first condition is true.
            </remarks>
        </member>
        <member name="M:Standard.Assert.IsNeitherNullNorEmpty(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not empty.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Standard.Assert.IsNeitherNullNorWhitespace(System.String)">
            <summary>
            Verifies that a string has content.  I.e. it is not null and it is not purely whitespace.
            </summary>
            <param name="value">The string to verify.</param>
        </member>
        <member name="M:Standard.Assert.IsNotNull``1(``0)">
            <summary>
            Verifies the specified value is not null.  The assertion fails if it is.
            </summary>
            <typeparam name="T">The generic reference type.</typeparam>
            <param name="value">The value to check for nullness.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.IsFalse(System.Boolean)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is false.  The assertion fails if it is true.
            </summary>
            <param name="condition">The expression that should be <c>false</c>.</param>
            <param name="message">The message to display if the condition is <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.IsTrue(System.Boolean)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Verifies that the specified condition is true.  The assertion fails if it is not.
            </summary>
            <param name="condition">A condition that is expected to be <c>true</c>.</param>
            <param name="message">The message to write in case the condition is <c>false</c>.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.Fail">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.Fail(System.String)">
            <summary>
            This line should never be executed.  The assertion always fails.
            </summary>
            <param name="message">The message to display if this function is executed.</param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="M:Standard.Assert.IsNull``1(``0)">
            <summary>
            Verifies that the specified object is null.  The assertion fails if it is not.
            </summary>
            <param name="item">The item to verify is null.</param>
        </member>
        <member name="M:Standard.Assert.BoundedDoubleInc(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundInclusive">The upper bound inclusive value.</param>
        </member>
        <member name="M:Standard.Assert.BoundedInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundExclusive">The upper bound exclusive value.</param>
        </member>
        <member name="M:Standard.Assert.IsApartmentState(System.Threading.ApartmentState)">
            <summary>
            Verify the current thread's apartment state is what's expected.  The assertion fails if it isn't
            </summary>
            <param name="expectedState">
            The expected apartment state for the current thread.
            </param>
            <remarks>This breaks into the debugger in the case of a failed assertion.</remarks>
        </member>
        <member name="T:Standard.Assert.EvaluateFunction">
            <summary>A function signature for Assert.Evaluate.</summary>
        </member>
        <member name="T:Standard.Assert.ImplicationFunction">
            <summary>A function signature for Assert.Implies.</summary>
            <returns>Returns the truth of a predicate.</returns>
        </member>
        <member name="T:Standard.DoubleUtilities">
            <summary>
            DoubleUtil uses fixed eps to provide fuzzy comparison functionality for doubles.
            Note that FP noise is a big problem and using any of these compare 
            methods is not a complete solution, but rather the way to reduce 
            the probability of repeating unnecessary work.
            </summary>
        </member>
        <member name="F:Standard.DoubleUtilities.Epsilon">
            <summary>
            Epsilon - more or less random, more or less small number.
            </summary>
        </member>
        <member name="M:Standard.DoubleUtilities.AreClose(System.Double,System.Double)">
            <summary>
            AreClose returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false. 
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the AreClose comparision.</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsStrictlyLessThan(System.Double,System.Double)">
            <summary>
            LessThan returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the LessThan comparision.</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsStrictlyGreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the GreaterThan comparision.</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsLessThanOrCloseTo(System.Double,System.Double)">
            <summary>
            LessThanOrClose returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the LessThanOrClose comparision.</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsGreaterThanOrCloseTo(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this 
            returns false.
            </summary>
            <param name="value1">The first double to compare.</param>
            <param name="value2">The second double to compare.</param>
            <returns>The result of the GreaterThanOrClose comparision.</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsFinite(System.Double)">
            <summary>
            Test to see if a double is a finite number (is not NaN or Infinity).
            </summary>
            <param name='value'>The value to test.</param>
            <returns>Whether or not the value is a finite number.</returns>
        </member>
        <member name="M:Standard.DoubleUtilities.IsValidSize(System.Double)">
            <summary>
            Test to see if a double a valid size value (is finite and > 0).
            </summary>
            <param name='value'>The value to test.</param>
            <returns>Whether or not the value is a valid size value.</returns>
        </member>
        <member name="M:Standard.DpiHelper.LogicalPixelsToDevice(System.Windows.Point)">
            <summary>
            Convert a point in device independent pixels (1/96") to a point in the system coordinates.
            </summary>
            <param name="logicalPoint">A point in the logical coordinate system.</param>
            <returns>Returns the parameter converted to the system's coordinates.</returns>
        </member>
        <member name="M:Standard.DpiHelper.DevicePixelsToLogical(System.Windows.Point)">
            <summary>
            Convert a point in system coordinates to a point in device independent pixels (1/96").
            </summary>
            <param name="devicePoint">A point in the physical coordinate system.</param>
            <returns>Returns the parameter converted to the device independent coordinate system.</returns>
        </member>
        <member name="T:Standard.Win32Error">
            <summary>
            Wrapper for common Win32 status codes.
            </summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_SUCCESS">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_FUNCTION">
            <summary>Incorrect function.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_FILE_NOT_FOUND">
            <summary>The system cannot find the file specified.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_PATH_NOT_FOUND">
            <summary>The system cannot find the path specified.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_TOO_MANY_OPEN_FILES">
            <summary>The system cannot open the file.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_ACCESS_DENIED">
            <summary>Access is denied.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_HANDLE">
            <summary>The handle is invalid.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_OUTOFMEMORY">
            <summary>Not enough storage is available to complete this operation.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NO_MORE_FILES">
            <summary>There are no more files.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_SHARING_VIOLATION">
            <summary>The process cannot access the file because it is being used by another process.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_PARAMETER">
            <summary>The parameter is incorrect.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INSUFFICIENT_BUFFER">
            <summary>The data area passed to a system call is too small.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NESTING_NOT_ALLOWED">
            <summary>Cannot nest calls to LoadModule.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_KEY_DELETED">
            <summary>Illegal operation attempted on a registry key that has been marked for deletion.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NOT_FOUND">
            <summary>Element not found.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_NO_MATCH">
            <summary>There was no match for the specified key in the index.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_BAD_DEVICE">
            <summary>An invalid device was specified.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_CANCELLED">
            <summary>The operation was canceled by the user.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_CANNOT_FIND_WND_CLASS">
            <summary>Cannot find window class.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_CLASS_ALREADY_EXISTS">
            <summary>The window class was already registered.</summary>
        </member>
        <member name="F:Standard.Win32Error.ERROR_INVALID_DATATYPE">
            <summary>The specified datatype is invalid.</summary>
        </member>
        <member name="M:Standard.Win32Error.#ctor(System.Int32)">
            <summary>
            Create a new Win32 error.
            </summary>
            <param name="i">The integer value of the error.</param>
        </member>
        <member name="M:Standard.Win32Error.op_Explicit(Standard.Win32Error)~Standard.HRESULT">
            <summary>Performs HRESULT_FROM_WIN32 conversion.</summary>
            <param name="error">The Win32 error being converted to an HRESULT.</param>
            <returns>The equivilent HRESULT value.</returns>
        </member>
        <member name="M:Standard.Win32Error.ToHRESULT">
            <summary>Performs HRESULT_FROM_WIN32 conversion.</summary>
            <returns>The equivilent HRESULT value.</returns>
        </member>
        <member name="M:Standard.Win32Error.GetLastError">
            <summary>Performs the equivalent of Win32's GetLastError()</summary>
            <returns>A Win32Error instance with the result of the native GetLastError</returns>
        </member>
        <member name="M:Standard.Win32Error.op_Equality(Standard.Win32Error,Standard.Win32Error)">
            <summary>
            Compare two Win32 error codes for equality.
            </summary>
            <param name="errLeft">The first error code to compare.</param>
            <param name="errRight">The second error code to compare.</param>
            <returns>Whether the two error codes are the same.</returns>
        </member>
        <member name="M:Standard.Win32Error.op_Inequality(Standard.Win32Error,Standard.Win32Error)">
            <summary>
            Compare two Win32 error codes for inequality.
            </summary>
            <param name="errLeft">The first error code to compare.</param>
            <param name="errRight">The second error code to compare.</param>
            <returns>Whether the two error codes are not the same.</returns>
        </member>
        <member name="F:Standard.Facility.Null">
            <summary>FACILITY_NULL</summary>
        </member>
        <member name="F:Standard.Facility.Rpc">
            <summary>FACILITY_RPC</summary>
        </member>
        <member name="F:Standard.Facility.Dispatch">
            <summary>FACILITY_DISPATCH</summary>
        </member>
        <member name="F:Standard.Facility.Storage">
            <summary>FACILITY_STORAGE</summary>
        </member>
        <member name="F:Standard.Facility.Itf">
            <summary>FACILITY_ITF</summary>
        </member>
        <member name="F:Standard.Facility.Win32">
            <summary>FACILITY_WIN32</summary>
        </member>
        <member name="F:Standard.Facility.Windows">
            <summary>FACILITY_WINDOWS</summary>
        </member>
        <member name="F:Standard.Facility.Control">
            <summary>FACILITY_CONTROL</summary>
        </member>
        <member name="F:Standard.Facility.Ese">
            <summary>MSDN doced facility code for ESE errors.</summary>
        </member>
        <member name="F:Standard.Facility.WinCodec">
            <summary>FACILITY_WINCODEC (WIC)</summary>
        </member>
        <member name="T:Standard.HRESULT">
            <summary>Wrapper for HRESULT status codes.</summary>
        </member>
        <member name="F:Standard.HRESULT.S_OK">
            <summary>S_OK</summary>
        </member>
        <member name="F:Standard.HRESULT.S_FALSE">
            <summary>S_FALSE</summary>
        </member>
        <member name="F:Standard.HRESULT.E_PENDING">
            <summary>E_PENDING</summary>
        </member>
        <member name="F:Standard.HRESULT.E_NOTIMPL">
            <summary>E_NOTIMPL</summary>
        </member>
        <member name="F:Standard.HRESULT.E_NOINTERFACE">
            <summary>E_NOINTERFACE</summary>
        </member>
        <member name="F:Standard.HRESULT.E_POINTER">
            <summary>E_POINTER</summary>
        </member>
        <member name="F:Standard.HRESULT.E_ABORT">
            <summary>E_ABORT</summary>
        </member>
        <member name="F:Standard.HRESULT.E_FAIL">
            <summary>E_FAIL</summary>
        </member>
        <member name="F:Standard.HRESULT.E_UNEXPECTED">
            <summary>E_UNEXPECTED</summary>
        </member>
        <member name="F:Standard.HRESULT.STG_E_INVALIDFUNCTION">
            <summary>STG_E_INVALIDFUNCTION</summary>
        </member>
        <member name="F:Standard.HRESULT.REGDB_E_CLASSNOTREG">
            <summary>REGDB_E_CLASSNOTREG</summary>
        </member>
        <member name="F:Standard.HRESULT.DESTS_E_NO_MATCHING_ASSOC_HANDLER">
            <summary>DESTS_E_NO_MATCHING_ASSOC_HANDLER.  Win7 internal error code for Jump Lists.</summary>
            <remarks>There is no Assoc Handler for the given item registered by the specified application.</remarks>
        </member>
        <member name="F:Standard.HRESULT.DESTS_E_NORECDOCS">
            <summary>DESTS_E_NORECDOCS.  Win7 internal error code for Jump Lists.</summary>
            <remarks>The given item is excluded from the recent docs folder by the NoRecDocs bit on its registration.</remarks>
        </member>
        <member name="F:Standard.HRESULT.DESTS_E_NOTALLCLEARED">
            <summary>DESTS_E_NOTALLCLEARED.  Win7 internal error code for Jump Lists.</summary>
            <remarks>Not all of the items were successfully cleared</remarks>
        </member>
        <member name="F:Standard.HRESULT.E_ACCESSDENIED">
            <summary>E_ACCESSDENIED</summary>
            <remarks>Win32Error ERROR_ACCESS_DENIED.</remarks>
        </member>
        <member name="F:Standard.HRESULT.E_OUTOFMEMORY">
            <summary>E_OUTOFMEMORY</summary>
            <remarks>Win32Error ERROR_OUTOFMEMORY.</remarks>
        </member>
        <member name="F:Standard.HRESULT.E_INVALIDARG">
            <summary>E_INVALIDARG</summary>
            <remarks>Win32Error ERROR_INVALID_PARAMETER.</remarks>
        </member>
        <member name="F:Standard.HRESULT.INTSAFE_E_ARITHMETIC_OVERFLOW">
            <summary>INTSAFE_E_ARITHMETIC_OVERFLOW</summary>
        </member>
        <member name="F:Standard.HRESULT.COR_E_OBJECTDISPOSED">
            <summary>COR_E_OBJECTDISPOSED</summary>
        </member>
        <member name="F:Standard.HRESULT.WC_E_GREATERTHAN">
            <summary>WC_E_GREATERTHAN</summary>
        </member>
        <member name="F:Standard.HRESULT.WC_E_SYNTAX">
            <summary>WC_E_SYNTAX</summary>
        </member>
        <member name="M:Standard.HRESULT.#ctor(System.UInt32)">
            <summary>
            Create an HRESULT from an integer value.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Standard.HRESULT.op_Explicit(Standard.HRESULT)~System.Int32">
            <summary>
            Convert an HRESULT to an int.  Used for COM interface declarations out of our control.
            </summary>
        </member>
        <member name="M:Standard.HRESULT.ToString">
            <summary>
            Get a string representation of this HRESULT.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Standard.HRESULT.ThrowLastError">
            <summary>
            Convert the result of Win32 GetLastError() into a raised exception.
            </summary>
        </member>
        <member name="P:Standard.HRESULT.Facility">
            <summary>
            retrieve HRESULT_FACILITY
            </summary>
        </member>
        <member name="P:Standard.HRESULT.Code">
            <summary>
            retrieve HRESULT_CODE
            </summary>
        </member>
        <member name="T:Standard.HCF">
            <summary>
            HIGHCONTRAST flags
            </summary>
        </member>
        <member name="T:Standard.DROPIMAGETYPE">
            <summary>
            DROPIMAGE_*
            </summary>
        </member>
        <member name="T:Standard.BI">
            <summary>
            BITMAPINFOHEADER Compression type.  BI_*.
            </summary>
        </member>
        <member name="T:Standard.RGN">
            <summary>
            CombingRgn flags.  RGN_*
            </summary>
        </member>
        <member name="F:Standard.RGN.AND">
            <summary>
            Creates the intersection of the two combined regions.
            </summary>
        </member>
        <member name="F:Standard.RGN.OR">
            <summary>
            Creates the union of two combined regions.
            </summary>
        </member>
        <member name="F:Standard.RGN.XOR">
            <summary>
            Creates the union of two combined regions except for any overlapping areas.
            </summary>
        </member>
        <member name="F:Standard.RGN.DIFF">
            <summary>
            Combines the parts of hrgnSrc1 that are not part of hrgnSrc2.
            </summary>
        </member>
        <member name="F:Standard.RGN.COPY">
            <summary>
            Creates a copy of the region identified by hrgnSrc1.
            </summary>
        </member>
        <member name="T:Standard.OLECMDEXECOPT">
            <summary>
            For IWebBrowser2.  OLECMDEXECOPT_*
            </summary>
        </member>
        <member name="T:Standard.OLECMDF">
            <summary>
            For IWebBrowser2.  OLECMDF_*
            </summary>
        </member>
        <member name="T:Standard.OLECMDID">
            <summary>
            For IWebBrowser2.  OLECMDID_*
            </summary>
        </member>
        <member name="T:Standard.READYSTATE">
            <summary>
            For IWebBrowser2.  READYSTATE_*
            </summary>
        </member>
        <member name="T:Standard.DOGIF">
            <summary>
            DATAOBJ_GET_ITEM_FLAGS.  DOGIF_*.
            </summary>
        </member>
        <member name="F:Standard.ErrorModes.Default">
            <summary>Use the system default, which is to display all error dialog boxes.</summary>
        </member>
        <member name="F:Standard.ErrorModes.FailCriticalErrors">
            <summary>
            The system does not display the critical-error-handler message box. 
            Instead, the system sends the error to the calling process.
            </summary>
        </member>
        <member name="F:Standard.ErrorModes.NoGpFaultErrorBox">
            <summary>
            64-bit Windows:  The system automatically fixes memory alignment faults and makes them 
            invisible to the application. It does this for the calling process and any descendant processes.
            After this value is set for a process, subsequent attempts to clear the value are ignored.
            </summary>
        </member>
        <member name="F:Standard.ErrorModes.NoAlignmentFaultExcept">
            <summary>
            The system does not display the general-protection-fault message box. 
            This flag should only be set by debugging applications that handle general 
            protection (GP) faults themselves with an exception handler.
            </summary>
        </member>
        <member name="F:Standard.ErrorModes.NoOpenFileErrorBox">
            <summary>
            The system does not display a message box when it fails to find a file. 
            Instead, the error is returned to the calling process.
            </summary>
        </member>
        <member name="T:Standard.HT">
            <summary>
            Non-client hit test values, HT*
            </summary>
        </member>
        <member name="T:Standard.GCLP">
            <summary>
            GetClassLongPtr values, GCLP_*
            </summary>
        </member>
        <member name="T:Standard.GWL">
            <summary>
            GetWindowLongPtr values, GWL_*
            </summary>
        </member>
        <member name="T:Standard.SM">
            <summary>
            SystemMetrics.  SM_*
            </summary>
        </member>
        <member name="T:Standard.SPI">
            <summary>
            SystemParameterInfo values, SPI_*
            </summary>
        </member>
        <member name="T:Standard.SPIF">
            <summary>
            SystemParameterInfo flag values, SPIF_*
            </summary>
        </member>
        <member name="T:Standard.CS">
            <summary>
            CS_*
            </summary>
        </member>
        <member name="T:Standard.WS">
            <summary>
            WindowStyle values, WS_*
            </summary>
        </member>
        <member name="T:Standard.WM">
            <summary>
            Window message values, WM_*
            </summary>
        </member>
        <member name="T:Standard.WS_EX">
            <summary>
            Window style extended values, WS_EX_*
            </summary>
        </member>
        <member name="T:Standard.DeviceCap">
            <summary>
            GetDeviceCaps nIndex values.
            </summary>
        </member>
        <member name="F:Standard.DeviceCap.BITSPIXEL">
            <summary>Number of bits per pixel
            </summary>
        </member>
        <member name="F:Standard.DeviceCap.PLANES">
            <summary>
            Number of planes
            </summary>
        </member>
        <member name="F:Standard.DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:Standard.DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="T:Standard.FOF">
            <summary>
            "FILEOP_FLAGS", FOF_*.
            </summary>
        </member>
        <member name="T:Standard.MF">
            <summary>
            EnableMenuItem uEnable values, MF_*
            </summary>
        </member>
        <member name="F:Standard.MF.DOES_NOT_EXIST">
            <summary>
            Possible return value for EnableMenuItem
            </summary>
        </member>
        <member name="T:Standard.WINDOWTHEMEATTRIBUTETYPE">
            <summary>Specifies the type of visual style attribute to set on a window.</summary>
        </member>
        <member name="F:Standard.WINDOWTHEMEATTRIBUTETYPE.WTA_NONCLIENT">
            <summary>Non-client area window attributes will be set.</summary>
        </member>
        <member name="T:Standard.DWMFLIP3D">
            <summary>
            DWMFLIP3DWINDOWPOLICY.  DWMFLIP3D_*
            </summary>
        </member>
        <member name="T:Standard.DWMNCRP">
            <summary>
            DWMNCRENDERINGPOLICY. DWMNCRP_*
            </summary>
        </member>
        <member name="T:Standard.DWMWA">
            <summary>
            DWMWINDOWATTRIBUTE.  DWMWA_*
            </summary>
        </member>
        <member name="T:Standard.WTNCA">
            <summary>
            WindowThemeNonClientAttributes
            </summary>
        </member>
        <member name="F:Standard.WTNCA.NODRAWCAPTION">
            <summary>Prevents the window caption from being drawn.</summary>
        </member>
        <member name="F:Standard.WTNCA.NODRAWICON">
            <summary>Prevents the system icon from being drawn.</summary>
        </member>
        <member name="F:Standard.WTNCA.NOSYSMENU">
            <summary>Prevents the system icon menu from appearing.</summary>
        </member>
        <member name="F:Standard.WTNCA.NOMIRRORHELP">
            <summary>Prevents mirroring of the question mark, even in right-to-left (RTL) layout.</summary>
        </member>
        <member name="F:Standard.WTNCA.VALIDBITS">
            <summary> A mask that contains all the valid bits.</summary>
        </member>
        <member name="T:Standard.SWP">
            <summary>
            SetWindowPos options
            </summary>
        </member>
        <member name="T:Standard.SW">
            <summary>
            ShowWindow options
            </summary>
        </member>
        <member name="F:Standard.SC.F_ISSECURE">
            <summary>
            SCF_ISSECURE
            </summary>
        </member>
        <member name="T:Standard.Status">
            <summary>
            GDI+ Status codes
            </summary>
        </member>
        <member name="T:Standard.MSGFLT">
            <summary>
            MSGFLT_*.  New in Vista.  Realiased in Windows 7.
            </summary>
        </member>
        <member name="T:Standard.NIM">
            <summary>
            Shell_NotifyIcon messages.  NIM_*
            </summary>
        </member>
        <member name="T:Standard.SHARD">
            <summary>
            SHAddToRecentDocuments flags.  SHARD_*
            </summary>
        </member>
        <member name="T:Standard.NIF">
            <summary>
            Shell_NotifyIcon flags.  NIF_*
            </summary>
        </member>
        <member name="F:Standard.NIF.REALTIME">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="F:Standard.NIF.SHOWTIP">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="T:Standard.NIIF">
            <summary>
            Shell_NotifyIcon info flags.  NIIF_*
            </summary>
        </member>
        <member name="F:Standard.NIIF.USER">
            <summary>XP SP2 and later.</summary>
        </member>
        <member name="F:Standard.NIIF.NOSOUND">
            <summary>XP and later.</summary>
        </member>
        <member name="F:Standard.NIIF.LARGE_ICON">
            <summary>Vista and later.</summary>
        </member>
        <member name="F:Standard.NIIF.NIIF_RESPECT_QUIET_TIME">
            <summary>Windows 7 and later</summary>
        </member>
        <member name="F:Standard.NIIF.XP_ICON_MASK">
            <summary>XP and later.  Native version called NIIF_ICON_MASK.</summary>
        </member>
        <member name="T:Standard.AC">
            <summary>
            AC_*
            </summary>
        </member>
        <member name="F:Standard.NOTIFYICONDATA.dwState">
            <summary>
            The state of the icon.  There are two flags that can be set independently.
            NIS_HIDDEN = 1.  The icon is hidden.
            NIS_SHAREDICON = 2.  The icon is shared.
            </summary>
        </member>
        <member name="F:Standard.SHARDAPPIDINFOIDLIST.pidl">
            <summary>The idlist for the shell item that should be added to the recent docs folder.</summary>
        </member>
        <member name="F:Standard.SHARDAPPIDINFOIDLIST.pszAppID">
            <summary>The id of the application that should be associated with this recent doc.</summary>
        </member>
        <member name="T:Standard.WTA_OPTIONS">
            <summary>Defines options that are used to set window visual style attributes.</summary>
        </member>
        <member name="F:Standard.WTA_OPTIONS.dwFlags">
            <summary>
            A combination of flags that modify window visual style attributes.
            Can be a combination of the WTNCA constants.
            </summary>
        </member>
        <member name="F:Standard.WTA_OPTIONS.dwMask">
            <summary>
            A bitmask that describes how the values specified in dwFlags should be applied.
            If the bit corresponding to a value in dwFlags is 0, that flag will be removed.
            If the bit is 1, the flag will be added.
            </summary>
        </member>
        <member name="F:Standard.MARGINS.cxLeftWidth">
            <summary>Width of left border that retains its size.</summary>
        </member>
        <member name="F:Standard.MARGINS.cxRightWidth">
            <summary>Width of right border that retains its size.</summary>
        </member>
        <member name="F:Standard.MARGINS.cyTopHeight">
            <summary>Height of top border that retains its size.</summary>
        </member>
        <member name="F:Standard.MARGINS.cyBottomHeight">
            <summary>Height of bottom border that retains its size.</summary>
        </member>
        <member name="F:Standard.APPBARDATA.cbSize">
            <summary>
            initialize this field using: Marshal.SizeOf(typeof(APPBARDATA));
            </summary>
        </member>
        <member name="T:Standard.WndProc">
            <summary>Delegate declaration that matches native WndProc signatures.</summary>
        </member>
        <member name="T:Standard.MessageHandler">
            <summary>Delegate declaration that matches managed WndProc signatures.</summary>
        </member>
        <member name="M:Standard.NativeMethods.SetWindowThemeAttribute(System.IntPtr,Standard.WINDOWTHEMEATTRIBUTETYPE,Standard.WTA_OPTIONS@,System.UInt32)">
            <summary>
            Sets attributes to control how visual styles are applied to a specified window.
            </summary>
            <param name="hwnd">
            Handle to a window to apply changes to.
            </param>
            <param name="eAttribute">
            Value of type WINDOWTHEMEATTRIBUTETYPE that specifies the type of attribute to set.
            The value of this parameter determines the type of data that should be passed in the pvAttribute parameter.
            Can be the following value:
            <list>WTA_NONCLIENT (Specifies non-client related attributes).</list>
            pvAttribute must be a pointer of type WTA_OPTIONS.
            </param>
            <param name="pvAttribute">
            A pointer that specifies attributes to set. Type is determined by the value of the eAttribute value.
            </param>
            <param name="cbAttribute">
            Specifies the size, in bytes, of the data pointed to by pvAttribute.
            </param>
        </member>
        <member name="M:Standard.NativeMethods._SystemParametersInfo_NONCLIENTMETRICS(Standard.SPI,System.Int32,Standard.NONCLIENTMETRICS@,Standard.SPIF)">
            <summary>Overload of SystemParametersInfo for getting and setting NONCLIENTMETRICS.</summary>
        </member>
        <member name="M:Standard.NativeMethods._SystemParametersInfo_HIGHCONTRAST(Standard.SPI,System.Int32,Standard.HIGHCONTRAST@,Standard.SPIF)">
            <summary>Overload of SystemParametersInfo for getting and setting HIGHCONTRAST.</summary>
        </member>
        <member name="M:Standard.NativeMethods.SetCurrentProcessExplicitAppUserModelID(System.String)">
            <summary>
            Sets the User Model AppID for the current process, enabling Windows to retrieve this ID
            </summary>
            <param name="AppID"></param>
        </member>
        <member name="M:Standard.NativeMethods.GetCurrentProcessExplicitAppUserModelID(System.String@)">
            <summary>
            Retrieves the User Model AppID that has been explicitly set for the current process via SetCurrentProcessExplicitAppUserModelID
            </summary>
            <param name="AppID"></param>
        </member>
        <member name="T:Standard.AL">
            <summary>ASSOCIATIONLEVEL, AL_*</summary>
        </member>
        <member name="T:Standard.AT">
            <summary>ASSOCIATIONTYPE, AT_*</summary>
        </member>
        <member name="T:Standard.FDAP">
            <summary>FileDialog AddPlace options.  FDAP_*</summary>
        </member>
        <member name="T:Standard.FOS">
            <summary>IFileDialog options.  FOS_*</summary>
        </member>
        <member name="T:Standard.FDEOR">
            <summary>FDE_OVERWRITE_RESPONSE.  FDEOR_*</summary>
        </member>
        <member name="T:Standard.FDESVR">
            <summary>FDE_SHAREVIOLATION_RESPONSE.  FDESVR_*</summary>
        </member>
        <member name="T:Standard.SIATTRIBFLAGS">
            <summary>ShellItem attribute flags.  SIATTRIBFLAGS_*</summary>
        </member>
        <member name="T:Standard.STPF">
            <summary>
            Flags for SetTabProperties.  STPF_*
            </summary>
            <remarks>The native enum was called STPFLAG.</remarks>
        </member>
        <member name="T:Standard.TBPF">
            <summary>
            Flags for Setting Taskbar Progress state.  TBPF_*
            </summary>
            <remarks>
            The native enum was called TBPFLAG.
            </remarks>
        </member>
        <member name="T:Standard.THB">
            <summary>
            THUMBBUTTON mask.  THB_*
            </summary>
        </member>
        <member name="T:Standard.THBF">
            <summary>
            THUMBBUTTON flags.  THBF_*
            </summary>
        </member>
        <member name="T:Standard.GPS">
            <summary>
            GetPropertyStoreFlags.  GPS_*.
            </summary>
            <remarks>
            These are new for Vista, but are used in downlevel components
            </remarks>
        </member>
        <member name="T:Standard.KDC">
            <summary>
            KNOWNDESTCATEGORY.  KDC_*
            </summary>
        </member>
        <member name="F:Standard.SFGAO.CANCOPY">
            <summary>Objects can be copied</summary>
            <remarks>DROPEFFECT_COPY</remarks>
        </member>
        <member name="F:Standard.SFGAO.CANMOVE">
            <summary>Objects can be moved</summary>
            <remarks>DROPEFFECT_MOVE</remarks>
        </member>
        <member name="F:Standard.SFGAO.CANLINK">
            <summary>Objects can be linked</summary>
            <remarks>
            DROPEFFECT_LINK.
            
            If this bit is set on an item in the shell folder, a
            'Create Shortcut' menu item will be added to the File
            menu and context menus for the item.  If the user selects
            that command, your IContextMenu::InvokeCommand() will be called
            with 'link'.
            That flag will also be used to determine if 'Create Shortcut'
            should be added when the item in your folder is dragged to another
            folder.
            </remarks>
        </member>
        <member name="F:Standard.SFGAO.STORAGE">
            <summary>supports BindToObject(IID_IStorage)</summary>
        </member>
        <member name="F:Standard.SFGAO.CANRENAME">
            <summary>Objects can be renamed</summary>
        </member>
        <member name="F:Standard.SFGAO.CANDELETE">
            <summary>Objects can be deleted</summary>
        </member>
        <member name="F:Standard.SFGAO.HASPROPSHEET">
            <summary>Objects have property sheets</summary>
        </member>
        <member name="F:Standard.SFGAO.DROPTARGET">
            <summary>Objects are drop target</summary>
        </member>
        <member name="F:Standard.SFGAO.ENCRYPTED">
            <summary>Object is encrypted (use alt color)</summary>
        </member>
        <member name="F:Standard.SFGAO.ISSLOW">
            <summary>'Slow' object</summary>
        </member>
        <member name="F:Standard.SFGAO.GHOSTED">
            <summary>Ghosted icon</summary>
        </member>
        <member name="F:Standard.SFGAO.LINK">
            <summary>Shortcut (link)</summary>
        </member>
        <member name="F:Standard.SFGAO.SHARE">
            <summary>Shared</summary>
        </member>
        <member name="F:Standard.SFGAO.READONLY">
            <summary>Read-only</summary>
        </member>
        <member name="F:Standard.SFGAO.HIDDEN">
            <summary> Hidden object</summary>
        </member>
        <member name="F:Standard.SFGAO.FILESYSANCESTOR">
            <summary> May contain children with SFGAO_FILESYSTEM</summary>
        </member>
        <member name="F:Standard.SFGAO.FOLDER">
            <summary>Support BindToObject(IID_IShellFolder)</summary>
        </member>
        <member name="F:Standard.SFGAO.FILESYSTEM">
            <summary>Is a win32 file system object (file/folder/root)</summary>
        </member>
        <member name="F:Standard.SFGAO.HASSUBFOLDER">
            <summary>May contain children with SFGAO_FOLDER (may be slow)</summary>
        </member>
        <member name="F:Standard.SFGAO.VALIDATE">
            <summary>Invalidate cached information (may be slow)</summary>
        </member>
        <member name="F:Standard.SFGAO.REMOVABLE">
            <summary>Is this removeable media?</summary>
        </member>
        <member name="F:Standard.SFGAO.COMPRESSED">
            <summary> Object is compressed (use alt color)</summary>
        </member>
        <member name="F:Standard.SFGAO.BROWSABLE">
            <summary>Supports IShellFolder, but only implements CreateViewObject() (non-folder view)</summary>
        </member>
        <member name="F:Standard.SFGAO.NONENUMERATED">
            <summary>Is a non-enumerated object (should be hidden)</summary>
        </member>
        <member name="F:Standard.SFGAO.NEWCONTENT">
            <summary>Should show bold in explorer tree</summary>
        </member>
        <member name="F:Standard.SFGAO.CANMONIKER">
            <summary>Obsolete</summary>
        </member>
        <member name="F:Standard.SFGAO.HASSTORAGE">
            <summary>Obsolete</summary>
        </member>
        <member name="F:Standard.SFGAO.STREAM">
            <summary>Supports BindToObject(IID_IStream)</summary>
        </member>
        <member name="F:Standard.SFGAO.STORAGEANCESTOR">
            <summary>May contain children with SFGAO_STORAGE or SFGAO_STREAM</summary>
        </member>
        <member name="F:Standard.SFGAO.STORAGECAPMASK">
            <summary>For determining storage capabilities, ie for open/save semantics</summary>
        </member>
        <member name="F:Standard.SFGAO.PKEYSFGAOMASK">
            <summary>
            Attributes that are masked out for PKEY_SFGAOFlags because they are considered
            to cause slow calculations or lack context
            (SFGAO_VALIDATE | SFGAO_ISSLOW | SFGAO_HASSUBFOLDER and others)
            </summary>
        </member>
        <member name="T:Standard.SHCONTF">
            <summary>
            IShellFolder::EnumObjects grfFlags bits.  Also called SHCONT
            </summary>
        </member>
        <member name="T:Standard.SHGDN">
            <summary>
            IShellFolder::GetDisplayNameOf/SetNameOf uFlags.  Also called SHGDNF.
            </summary>
            <remarks>
            For compatibility with SIGDN, these bits must all sit in the LOW word.
            </remarks>
        </member>
        <member name="T:Standard.SICHINT">
            <summary>
            SHELLITEMCOMPAREHINTF.  SICHINT_*.
            </summary>
        </member>
        <member name="F:Standard.SICHINT.DISPLAY">
            <summary>iOrder based on display in a folder view</summary>
        </member>
        <member name="F:Standard.SICHINT.ALLFIELDS">
            <summary>exact instance compare</summary>
        </member>
        <member name="F:Standard.SICHINT.CANONICAL">
            <summary>iOrder based on canonical name (better performance)</summary>
        </member>
        <member name="T:Standard.SIGDN">
            <summary>
            ShellItem enum.  SIGDN_*.
            </summary>
        </member>
        <member name="T:Standard.STR_GPS">
             <summary>
             STR_GPS_*
             </summary>
             <remarks>
             When requesting a property store through IShellFolder, you can specify the equivalent of
             GPS_DEFAULT by passing in a null IBindCtx parameter.
            
             You can specify the equivalent of GPS_READWRITE by passing a mode of STGM_READWRITE | STGM_EXCLUSIVE
             in the bind context
            
             Here are the string versions of GPS_ flags, passed to IShellFolder::BindToObject() via IBindCtx::RegisterObjectParam()
             These flags are valid when requesting an IPropertySetStorage or IPropertyStore handler
            
             The meaning of these flags are described above.
            
             There is no STR_ equivalent for GPS_TEMPORARY because temporary property stores
             are provided by IShellItem2 only -- not by the underlying IShellFolder.
             </remarks>
        </member>
        <member name="F:Standard.THUMBBUTTON.THBN_CLICKED">
            <summary>
            WPARAM value for a THUMBBUTTON being clicked.
            </summary>
        </member>
        <member name="F:Standard.PKEY._fmtid">
            <summary>fmtid</summary>
        </member>
        <member name="F:Standard.PKEY._pid">
            <summary>pid</summary>
        </member>
        <member name="F:Standard.PKEY.Title">
            <summary>PKEY_Title</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_ID">
            <summary>PKEY_AppUserModel_ID</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_IsDestListSeparator">
            <summary>PKEY_AppUserModel_IsDestListSeparator</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_RelaunchCommand">
            <summary>PKEY_AppUserModel_RelaunchCommand</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_RelaunchDisplayNameResource">
            <summary>PKEY_AppUserModel_RelaunchDisplayNameResource</summary>
        </member>
        <member name="F:Standard.PKEY.AppUserModel_RelaunchIconResource">
            <summary>PKEY_AppUserModel_RelaunchIconResource</summary>
        </member>
        <member name="T:Standard.IObjectArray">
            <summary>Unknown Object Array</summary>
        </member>
        <member name="T:Standard.IShellItem">
            <summary>
            Shell Namespace helper
            </summary>
        </member>
        <member name="T:Standard.IShellItem2">
            <summary>
            Shell Namespace helper 2
            </summary>
        </member>
        <member name="M:Standard.ITaskbarList.HrInit">
            <summary>
            This function must be called first to validate use of other members.
            </summary>
        </member>
        <member name="M:Standard.ITaskbarList.AddTab(System.IntPtr)">
            <summary>
            This function adds a tab for hwnd to the taskbar.
            </summary>
            <param name="hwnd">The HWND for which to add the tab.</param>
        </member>
        <member name="M:Standard.ITaskbarList.DeleteTab(System.IntPtr)">
            <summary>
            This function deletes a tab for hwnd from the taskbar.
            </summary>
            <param name="hwnd">The HWND for which the tab is to be deleted.</param>
        </member>
        <member name="M:Standard.ITaskbarList.ActivateTab(System.IntPtr)">
            <summary>
            This function activates the tab associated with hwnd on the taskbar.
            </summary>
            <param name="hwnd">The HWND for which the tab is to be actuvated.</param>
        </member>
        <member name="M:Standard.ITaskbarList.SetActiveAlt(System.IntPtr)">
            <summary>
            This function marks hwnd in the taskbar as the active tab.
            </summary>
            <param name="hwnd">The HWND to activate.</param>
        </member>
        <member name="M:Standard.ITaskbarList2.MarkFullscreenWindow(System.IntPtr,System.Boolean)">
            <summary>
            Marks a window as full-screen.
            </summary>
            <param name="hwnd">The handle of the window to be marked.</param>
            <param name="fFullscreen">A Boolean value marking the desired full-screen status of the window.</param>
            <remarks>
            Setting the value of fFullscreen to true, the Shell treats this window as a full-screen window, and the taskbar
            is moved to the bottom of the z-order when this window is active.  Setting the value of fFullscreen to false
            removes the full-screen marking, but <i>does not</i> cause the Shell to treat the window as though it were
            definitely not full-screen.  With a false fFullscreen value, the Shell depends on its automatic detection facility
            to specify how the window should be treated, possibly still flagging the window as full-screen.
            </remarks>
        </member>
        <member name="T:Standard.IApplicationDocumentLists">
            <summary>
            Allows an application to retrieve the most recent and frequent documents opened in that app, as reported via SHAddToRecentDocs
            </summary>
        </member>
        <member name="M:Standard.IApplicationDocumentLists.SetAppID(System.String)">
            <summary>
            Set the App User Model ID for the application retrieving this list.  If an AppID is not provided via this method,
            the system will use a heuristically determined ID.  This method must be called before GetList. 
            </summary>
            <param name="pszAppID">App Id.</param>
        </member>
        <member name="M:Standard.IApplicationDocumentLists.GetList(Standard.APPDOCLISTTYPE,System.UInt32,System.Guid@)">
            <summary>
            Retrieve an IEnumObjects or IObjectArray for IShellItems and/or IShellLinks. 
            Items may appear in both the frequent and recent lists.  
            </summary>
            <returns></returns>
        </member>
        <member name="T:Standard.IObjectWithAppUserModelId">
            <summary>
            Provides access to the App User Model ID on objects supporting this value.
            </summary>
        </member>
        <member name="T:Standard.IObjectWithProgId">
            <summary>
            Provides access to the ProgID associated with an object 
            </summary>
        </member>
        <member name="T:Standard.ComStream">
            <summary>
            Wraps an IStream interface pointer from COM into a form consumable by .Net.
            </summary>
            <remarks>
            This implementation is immutable, though it's possible that the underlying
            stream can be changed in another context.
            </remarks>
        </member>
        <member name="M:Standard.ComStream.#ctor(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Wraps a native IStream interface into a CLR Stream subclass.
            </summary>
            <param name="stream">
            The stream that this object wraps.
            </param>
            <remarks>
            Note that the parameter is passed by ref.  On successful creation it is
            zeroed out to the caller.  This object becomes responsible for the lifetime
            management of the wrapped IStream.
            </remarks>
        </member>
        <member name="T:Standard.ManagedIStream">
            <summary>
            Wraps a managed stream instance into an interface pointer consumable by COM.
            </summary>
        </member>
        <member name="M:Standard.ManagedIStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the ManagedIStream class with the specified managed Stream object.
            </summary>
            <param name="source">
            The stream that this IStream reference is wrapping.
            </param>
        </member>
        <member name="M:Standard.ManagedIStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
            <summary>
            Creates a new stream object with its own seek pointer that
            references the same bytes as the original stream. 
            </summary>
            <param name="ppstm">
            When this method returns, contains the new stream object. This parameter is passed uninitialized.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Clone in the MSDN library.
            This class doesn't implement Clone.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Commit(System.Int32)">
            <summary>
            Ensures that any changes made to a stream object that is open in transacted
            mode are reflected in the parent storage. 
            </summary>
            <param name="grfCommitFlags">
            A value that controls how the changes for the stream object are committed. 
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Commit in the MSDN library.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
            <summary>
            Copies a specified number of bytes from the current seek pointer in the
            stream to the current seek pointer in another stream. 
            </summary>
            <param name="pstm">
            A reference to the destination stream. 
            </param>
            <param name="cb">
            The number of bytes to copy from the source stream. 
            </param>
            <param name="pcbRead">
            On successful return, contains the actual number of bytes read from the source.
            (Note the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.)
            </param>
            <param name="pcbWritten">
            On successful return, contains the actual number of bytes written to the destination.
            (Note the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.)
            </param>
        </member>
        <member name="M:Standard.ManagedIStream.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Restricts access to a specified range of bytes in the stream. 
            </summary>
            <param name="libOffset">
            The byte offset for the beginning of the range. 
            </param>
            <param name="cb">
            The length of the range, in bytes, to restrict.
            </param>
            <param name="dwLockType">
            The requested restrictions on accessing the range.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::LockRegion in the MSDN library.
            This class doesn't implement LockRegion.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Read(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Reads a specified number of bytes from the stream object into memory starting at the current seek pointer. 
            </summary>
            <param name="pv">
            When this method returns, contains the data read from the stream. This parameter is passed uninitialized.
            </param>
            <param name="cb">
            The number of bytes to read from the stream object. 
            </param>
            <param name="pcbRead">
            A pointer to a ULONG variable that receives the actual number of bytes read from the stream object.
            </param>
            <remarks>
            For more information, see the existing documentation for ISequentialStream::Read in the MSDN library.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Revert">
            <summary>
            Discards all changes that have been made to a transacted stream since the last Commit call.
            </summary>
            <remarks>
            This class doesn't implement Revert.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Seek(System.Int64,System.Int32,System.IntPtr)">
            <summary>
            Changes the seek pointer to a new location relative to the beginning of the
            stream, to the end of the stream, or to the current seek pointer.
            </summary>
            <param name="dlibMove">
            The displacement to add to dwOrigin.
            </param>
            <param name="dwOrigin">
            The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file. 
            </param>
            <param name="plibNewPosition">
            On successful return, contains the offset of the seek pointer from the beginning of the stream.
            (Note the native signature is to a ULARGE_INTEGER*, so 64 bits are written
            to this parameter on success.)
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::Seek in the MSDN library.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.SetSize(System.Int64)">
            <summary>
            Changes the size of the stream object. 
            </summary>
            <param name="libNewSize">
            The new size of the stream as a number of bytes. 
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::SetSize in the MSDN library.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
            <summary>
            Retrieves the STATSTG structure for this stream. 
            </summary>
            <param name="pstatstg">
            When this method returns, contains a STATSTG structure that describes this stream object.
            This parameter is passed uninitialized.
            </param>
            <param name="grfStatFlag">
            Members in the STATSTG structure that this method does not return, thus saving some memory allocation operations. 
            </param>
        </member>
        <member name="M:Standard.ManagedIStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes the access restriction on a range of bytes previously restricted with the LockRegion method.
            </summary>
            <param name="libOffset">The byte offset for the beginning of the range.
            </param>
            <param name="cb">
            The length, in bytes, of the range to restrict.
            </param>
            <param name="dwLockType">
            The access restrictions previously placed on the range.
            </param>
            <remarks>
            For more information, see the existing documentation for IStream::UnlockRegion in the MSDN library.
            This class doesn't implement UnlockRegion.  A COMException is thrown if it is used.
            </remarks>
        </member>
        <member name="M:Standard.ManagedIStream.Write(System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Writes a specified number of bytes into the stream object starting at the current seek pointer.
            </summary>
            <param name="pv">
            The buffer to write this stream to.
            </param>
            <param name="cb">
            The number of bytes to write to the stream. 
            </param>
            <param name="pcbWritten">
            On successful return, contains the actual number of bytes written to the stream object. 
            If the caller sets this pointer to null, this method does not provide the actual number
            of bytes written.
            </param>
        </member>
        <member name="M:Standard.ManagedIStream.Dispose">
            <summary>
            Releases resources controlled by this object.
            </summary>
            <remarks>
            Dispose can be called multiple times, but trying to use the object
            after it has been disposed will generally throw ObjectDisposedExceptions.
            </remarks>
        </member>
        <member name="M:Standard.Utility.SafeCopyFile(System.String,System.String,Standard.SafeCopyFileOptions)">
            <summary>
            Wrapper around File.Copy to provide feedback as to whether the file wasn't copied because it didn't exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Standard.Utility.SafeDeleteFile(System.String)">
            <summary>
            Simple guard against the exceptions that File.Delete throws on null and empty strings.
            </summary>
            <param name="path">The path to delete.  Unlike File.Delete, this can be null or empty.</param>
            <remarks>
            Note that File.Delete, and by extension SafeDeleteFile, does not throw an exception
            if the file does not exist.
            </remarks>
        </member>
        <member name="M:Standard.Utility.GeneratePropertyString(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Utility to help classes catenate their properties for implementing ToString().
            </summary>
            <param name="source">The StringBuilder to catenate the results into.</param>
            <param name="propertyName">The name of the property to be catenated.</param>
            <param name="value">The value of the property to be catenated.</param>
        </member>
        <member name="M:Standard.Utility.GenerateToString``1(``0)">
            <summary>
            Generates ToString functionality for a struct.  This is an expensive way to do it,
            it exists for the sake of debugging while classes are in flux.
            Eventually this should just be removed and the classes should
            do this without reflection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Standard.Utility.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.  Duplicated functionality from System.Web.HttpUtility.UrlEncode.
            </summary>
            <param name="url"></param>
            <returns></returns>
            <remarks>
            Duplicated from System.Web.HttpUtility because System.Web isn't part of the client profile.
            URL Encoding replaces ' ' with '+' and unsafe ASCII characters with '%XX'.
            Safe characters are defined in RFC2396 (http://www.ietf.org/rfc/rfc2396.txt).
            They are the 7-bit ASCII alphanumerics and the mark characters "-_.!~*'()".
            This implementation does not treat '~' as a safe character to be consistent with the System.Web version.
            </remarks>
        </member>
        <member name="M:Standard.Utility.SafeDeleteObject(System.IntPtr@)">
            <summary>GDI's DeleteObject</summary>
        </member>
        <member name="M:Standard.Utility.SafeDisposeImage(System.IntPtr@)">
            <summary>GDI+'s DisposeImage</summary>
            <param name="gdipImage"></param>
        </member>
        <member name="M:Standard.Utility._GetBestMatch(System.Collections.Generic.IList{System.Windows.Media.Imaging.BitmapFrame},System.Int32,System.Int32,System.Int32)">
            From a list of BitmapFrames find the one that best matches the requested dimensions.
            The methods used here are copied from Win32 sources.  We want to be consistent with
            system behaviors.
        </member>
        <member name="M:Standard.Utility.ColorFromArgbDword(System.UInt32)">
            <summary>Convert a native integer that represent a color with an alpha channel into a Color struct.</summary>
            <param name="color">The integer that represents the color.  Its bits are of the format 0xAARRGGBB.</param>
            <returns>A Color representation of the parameter.</returns>
        </member>
        <member name="T:Standard.Verify">
            <summary>
            A static class for retail validated assertions.
            Instead of breaking into the debugger an exception is thrown.
            </summary>
        </member>
        <member name="M:Standard.Verify.IsApartmentState(System.Threading.ApartmentState,System.String)">
            <summary>
            Ensure that the current thread's apartment state is what's expected.
            </summary>
            <param name="requiredState">
            The required apartment state for the current thread.
            </param>
            <param name="message">
            The message string for the exception to be thrown if the state is invalid.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the calling thread's apartment state is not the same as the requiredState.
            </exception>
        </member>
        <member name="M:Standard.Verify.IsNeitherNullNorEmpty(System.String,System.String)">
            <summary>
            Ensure that an argument is neither null nor empty.
            </summary>
            <param name="value">The string to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Standard.Verify.IsNeitherNullNorWhitespace(System.String,System.String)">
            <summary>
            Ensure that an argument is neither null nor does it consist only of whitespace.
            </summary>
            <param name="value">The string to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Standard.Verify.IsNotDefault``1(``0,System.String)">
            <summary>Verifies that an argument is not null.</summary>
            <typeparam name="T">Type of the object to validate.  Must be a class.</typeparam>
            <param name="obj">The object to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Standard.Verify.IsNotNull``1(``0,System.String)">
            <summary>Verifies that an argument is not null.</summary>
            <typeparam name="T">Type of the object to validate.  Must be a class.</typeparam>
            <param name="obj">The object to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Standard.Verify.IsNull``1(``0,System.String)">
            <summary>Verifies that an argument is null.</summary>
            <typeparam name="T">Type of the object to validate.  Must be a class.</typeparam>
            <param name="obj">The object to validate.</param>
            <param name="name">The name of the parameter that will be presented if an exception is thrown.</param>
        </member>
        <member name="M:Standard.Verify.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies the specified statement is true.  Throws an ArgumentException if it's not.
            </summary>
            <param name="statement">The statement to be verified as true.</param>
            <param name="name">Name of the parameter to include in the ArgumentException.</param>
            <param name="message">The message to include in the ArgumentException.</param>
        </member>
        <member name="M:Standard.Verify.BoundedInteger(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Verifies that the specified value is within the expected range.  The assertion fails if it isn't.
            </summary>
            <param name="lowerBoundInclusive">The lower bound inclusive value.</param>
            <param name="value">The value to verify.</param>
            <param name="upperBoundExclusive">The upper bound exclusive value.</param>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.SystemCommands.ShowSystemMenu(System.Windows.Window,System.Windows.Point)">
            <summary>Display the system menu at a specified location.</summary>
            <param name="window">The MetroWindow</param>
            <param name="screenLocation">The location to display the system menu, in logical screen coordinates.</param>
        </member>
        <member name="M:Microsoft.Windows.Shell.SystemParameters2.#ctor">
            <summary>
            Private constructor.  The public way to access this class is through the static Current property.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChrome.CaptionHeight">
            <summary>The extent of the top of the window to treat as the caption.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._window">
            <summary>The Window that's chrome is being modified.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._hwnd">
            <summary>Underlying HWND for the _window.</summary>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._chromeInfo">
            <summary>Object that describes the current modifications being made to the chrome.</summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker.AdjustWorkingAreaForAutoHide(System.IntPtr,Standard.RECT)">
            <summary>
            This method handles the window size if the taskbar is set to auto-hide.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._ModifyStyle(Standard.WS,Standard.WS)">
            <summary>Add and remove a native WindowStyle from the HWND.</summary>
            <param name="removeStyle">The styles to be removed.  These can be bitwise combined.</param>
            <param name="addStyle">The styles to be added.  These can be bitwise combined.</param>
            <returns>Whether the styles of the HWND were modified as a result of this call.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetHwndState">
            <summary>
            Get the WindowState as the native HWND knows it to be.  This isn't necessarily the same as what Window thinks.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._GetWindowRect">
            <summary>
            Get the bounding rectangle for the window in physical coordinates.
            </summary>
            <returns>The bounding rectangle for the window.</returns>
        </member>
        <member name="M:Microsoft.Windows.Shell.WindowChromeWorker._UpdateSystemMenu(System.Nullable{System.Windows.WindowState})">
            <summary>
            Update the items in the system menu based on the current, or assumed, WindowState.
            </summary>
            <param name="assumeState">
            The state to assume that the Window is in.  This can be null to query the Window's state.
            </param>
            <remarks>
            We want to update the menu while we have some control over whether the caption will be repainted.
            </remarks>
        </member>
        <member name="F:Microsoft.Windows.Shell.WindowChromeWorker._HitTestBorders">
            <summary>
            Matrix of the HT values to return when responding to NC window messages.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChromeWorker._IsPresentationFrameworkVersionLessThan4">
            <summary>
            Is this using WPF4?
            </summary>
            <remarks>
            There are a few specific bugs in Window in 3.5SP1 and below that require workarounds
            when handling WM_NCCALCSIZE on the HWND.
            </remarks>
        </member>
        <member name="P:Microsoft.Windows.Shell.WindowChromeWorker._MinimizeAnimation">
            A borderless window lost his animation, with this we bring it back.
        </member>
        <member name="T:MahApps.Metro.Models.Win32.WM">
            <summary>
            Windows Messages
            Defined in winuser.h from Windows SDK v6.1
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. 
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window. 
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed. 
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. 
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WM.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MAXIMIZE">
            <summary>The window is initially maximized.</summary> 
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WS.VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Models.Win32.WSEX.WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.IWindowPlacementSettings.Reload">
            <summary>
            Refreshes the application settings property values from persistent storage.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.IWindowPlacementSettings.Upgrade">
            <summary>
            Updates application settings to reflect a more recent installation of the application.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.IWindowPlacementSettings.Save">
            <summary>
            Stores the current values of the settings properties.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.IWindowPlacementSettings.UpgradeSettings">
            <summary>
            Upgrades the application settings on loading.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.WindowApplicationSettings">
            <summary>
            this settings class is the default way to save the placement of the window
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.WindowApplicationSettings.UpgradeSettings">
            <summary>
            Upgrades the application settings on loading.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_HIDE">
            <summary>
                   Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNORMAL">
            <summary>
                   Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_NORMAL">
            <summary>
                   Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMINIMIZED">
            <summary>
                   Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMAXIMIZED">
            <summary>
                   Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_MAXIMIZE">
            <summary>
                   Maximizes the specified window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNOACTIVATE">
            <summary>
                   Displays a window in its most recent size and position. This value is similar to <see cref="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNORMAL"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOW">
            <summary>
                   Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_MINIMIZE">
            <summary>
                   Minimizes the specified window and activates the next top-level window in the z-order.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMINNOACTIVE">
            <summary>
                   Displays the window as a minimized window. This value is similar to <see cref="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWMINIMIZED"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOWNA">
            <summary>
                   Displays the window in its current size and position. This value is similar to <see cref="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_SHOW"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.ShowWindowCommands.SW_RESTORE">
            <summary>
                   Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.Invalidate">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.InternalPaint">
            <summary>Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.Erase">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.Validate">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.NoErase">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.NoChildren">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.AllChildren">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.UpdateNow">
            <summary>Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.</summary>
        </member>
        <member name="F:MahApps.Metro.Native.Constants.RedrawWindowFlags.EraseNow">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="M:MahApps.Metro.Native.RECT.Equals(System.Object)">
            <summary> Determine if 2 RECT are equal (deep compare) </summary>
        </member>
        <member name="M:MahApps.Metro.Native.RECT.GetHashCode">
            <summary>Return the HashCode for this struct (not garanteed to be unique)</summary>
        </member>
        <member name="T:MahApps.Metro.Controls.MetroContentControl">
            <summary>
            Originally from http://xamlcoder.com/blog/2010/11/04/creating-a-metro-ui-style-control/
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.RevealImage">
            <summary>
            RevealImage
            </summary>
        </member>
        <member name="M:MahApps.Metro.Controls.RevealImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:MahApps.Metro.Controls.ToggleSwitch">
            <summary>
            A control that allows the user to toggle between two states: One represents true; The other represents false.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.OnLabel">
            <summary>
            Gets/sets the text to display when the control is in it's On state.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.OffLabel">
            <summary>
            Gets/sets the text to display when the control is in it's Off state.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.Header">
            <summary>
            Gets/sets the header to display on top of the control.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.HeaderTemplate">
            <summary>
            Gets/sets the data template used to display the header on the top of the control.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.SwitchForeground">
            <summary>
            Gets/sets the brush used for the switch's foreground.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.ContentDirection">
            <summary>
            Gets/sets the control's content flow direction.
            </summary>
        </member>
        <member name="P:MahApps.Metro.Controls.ToggleSwitch.IsChecked">
            <summary>
            Gets/sets whether the control is Checked (On) or not (Off).
            </summary>
        </member>
        <member name="E:MahApps.Metro.Controls.ToggleSwitch.IsCheckedChanged">
            <summary>
            An event that is raised when the value of IsChecked changes.
            </summary>
        </member>
        <member name="T:MahApps.Metro.Native.UnsafeNativeMethods">
            <devdoc>http://msdn.microsoft.com/en-us/library/ms182161.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DwmIsCompositionEnabled">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/aa969518%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,MahApps.Metro.Native.MARGINS@)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/aa969512%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DwmSetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/aa969524%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms633572%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetMonitorInfo(System.IntPtr,MahApps.Metro.Native.MONITORINFO)">
            <devdoc>http://msdn.microsoft.com/en-us/library/dd144901%28v=VS.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.MonitorFromWindow(System.IntPtr,System.Int32)">
            <devdoc>http://msdn.microsoft.com/en-us/library/dd145064%28v=VS.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms633545(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.LoadString(MahApps.Metro.Native.SafeLibraryHandle,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms647486%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.IsWindow(System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms633528(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms647985(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.TrackPopupMenuEx(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms648003(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods._PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms644944(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetCursorPos(MahApps.Metro.Native.POINT@)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms648390(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetDoubleClickTime">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms646258(v=vs.85).aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.LoadLibrary(System.String)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms684175%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.FreeLibrary(System.IntPtr)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms683152%28v=vs.85%29.aspx</devdoc>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.SetWindowPlacement(System.IntPtr,MahApps.Metro.Native.WINDOWPLACEMENT@)">
            <summary>
            Sets the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="lpwndpl">
            A pointer to a WINDOWPLACEMENT structure that specifies the new show state and window positions.
            <para>
            Before calling SetWindowPlacement, set the length member of the WINDOWPLACEMENT structure to sizeof(WINDOWPLACEMENT). SetWindowPlacement fails if the length member is not set correctly.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.GetWindowPlacement(System.IntPtr,MahApps.Metro.Native.WINDOWPLACEMENT@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="lpwndpl">
            A pointer to the WINDOWPLACEMENT structure that receives the show state and position information.
            <para>
            Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="M:MahApps.Metro.Native.UnsafeNativeMethods.EnableMenuItem(System.IntPtr,System.UInt32,System.UInt32)">
            <devdoc>http://msdn.microsoft.com/en-us/library/windows/desktop/ms647636(v=vs.85).aspx</devdoc>
        </member>
        <member name="T:MahApps.Metro.AppTheme">
            <summary>
            Represents the background theme of the application.
            </summary>
        </member>
        <member name="P:MahApps.Metro.AppTheme.Resources">
            <summary>
            The ResourceDictionary that represents this application theme.
            </summary>
        </member>
        <member name="P:MahApps.Metro.AppTheme.Name">
            <summary>
            Gets the name of the application theme.
            </summary>
        </member>
        <member name="T:MahApps.Metro.ThemeManager">
            <summary>
            A class that allows for the detection and alteration of a MetroWindow's theme and accent.
            </summary>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.AddAccent(System.String,System.Uri)">
            <summary>
            Adds an accent with the given name.
            </summary>
            <param name="name"></param>
            <param name="resourceAddress"></param>
            <returns>true if the accent does not exists and can be added.</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.AddAppTheme(System.String,System.Uri)">
            <summary>
            Adds an app theme with the given name.
            </summary>
            <param name="name"></param>
            <param name="resourceAddress"></param>
            <returns>true if the app theme does not exists and can be added.</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAppTheme(System.Windows.ResourceDictionary)">
            <summary>
            Gets app theme with the given resource dictionary.
            </summary>
            <param name="resources"></param>
            <returns>AppTheme</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAppTheme(System.String)">
            <summary>
            Gets app theme with the given name and theme type (light or dark).
            </summary>
            <param name="appThemeName"></param>
            <returns>AppTheme</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetInverseAppTheme(MahApps.Metro.AppTheme)">
            <summary>
            Gets the inverse <see cref="T:MahApps.Metro.AppTheme"/> of the given <see cref="T:MahApps.Metro.AppTheme"/>.
            This method relies on the "Dark" or "Light" affix to be present.
            </summary>
            <param name="appTheme">The app theme.</param>
            <returns>The inverse <see cref="T:MahApps.Metro.AppTheme"/> or <c>null</c> if it couldn't be found.</returns>
            <remarks>
            Returns BaseLight, if BaseDark is given or vice versa.
            Custom Themes must end with "Dark" or "Light" for this to work, for example "CustomDark" and "CustomLight".
            </remarks>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAccent(System.String)">
            <summary>
            Gets the <see cref="T:MahApps.Metro.Accent"/> with the given name.
            </summary>
            <param name="accentName"></param>
            <returns>The <see cref="T:MahApps.Metro.Accent"/> or <c>null</c>, if the app theme wasn't found</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetAccent(System.Windows.ResourceDictionary)">
            <summary>
            Gets the <see cref="T:MahApps.Metro.Accent"/> with the given resource dictionary.
            </summary>
            <param name="resources"></param>
            <returns>The <see cref="T:MahApps.Metro.Accent"/> or <c>null</c>, if the accent wasn't found.</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.IsAccentDictionary(System.Windows.ResourceDictionary)">
            <summary>
            Determines whether the specified resource dictionary represents an <see cref="T:MahApps.Metro.Accent"/>.
            <para/>
            This might include runtime accents which do not have a resource uri.
            </summary>
            <param name="resources">The resources.</param>
            <returns><c>true</c> if the resource dictionary is an <see cref="T:MahApps.Metro.Accent"/>; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">resources</exception>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.GetResourceFromAppStyle(System.Windows.Window,System.String)">
            <summary>
            Gets a resource from the detected AppStyle.
            </summary>
            <param name="window">The window to check. If this is null, the Application's sources will be checked.</param>
            <param name="key">The key to check against.</param>
            <returns>The resource object or null, if the resource wasn't found.</returns>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppTheme(System.Windows.Application,System.String)">
            <summary>
            Change the theme for the whole application.
            </summary>
            <param name="app"></param>
            <param name="themeName"></param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppTheme(System.Windows.Window,System.String)">
            <summary>
            Change theme for the given window.
            </summary>
            <param name="window"></param>
            <param name="themeName"></param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppStyle(System.Windows.Application,MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>
            Change accent and theme for the whole application.
            </summary>
            <param name="app">The instance of Application to change.</param>
            <param name="newAccent">The accent to apply.</param>
            <param name="newTheme">The theme to apply.</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppStyle(System.Windows.Window,MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>
            Change accent and theme for the given window.
            </summary>
            <param name="window">The Window to change.</param>
            <param name="newAccent">The accent to apply.</param>
            <param name="newTheme">The theme to apply.</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.ChangeAppStyle(System.Windows.ResourceDictionary,MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>
            Changes the accent and theme of a ResourceDictionary directly.
            </summary>
            <param name="resources">The ResourceDictionary to modify.</param>
            <param name="newAccent">The accent to apply to the ResourceDictionary.</param>
            <param name="newTheme">The theme to apply to the ResourceDictionary.</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle">
            <summary>
            Scans the window resources and returns it's accent and theme.
            </summary>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle(System.Windows.Window)">
            <summary>
            Scans the window resources and returns it's accent and theme.
            </summary>
            <param name="window">The Window to scan.</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle(System.Windows.Application)">
            <summary>
            Scans the application resources and returns it's accent and theme.
            </summary>
            <param name="app">The Application instance to scan.</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.DetectAppStyle(System.Windows.ResourceDictionary)">
            <summary>
            Scans a resources and returns it's accent and theme.
            </summary>
            <param name="resources">The ResourceDictionary to check.</param>
        </member>
        <member name="M:MahApps.Metro.ThemeManager.OnThemeChanged(MahApps.Metro.Accent,MahApps.Metro.AppTheme)">
            <summary>
            Invalidates global colors and resources.
            Sometimes the ContextMenu is not changing the colors, so this will fix it.
            </summary>
        </member>
        <member name="P:MahApps.Metro.ThemeManager.Accents">
            <summary>
            Gets a list of all of default themes.
            </summary>
        </member>
        <member name="P:MahApps.Metro.ThemeManager.AppThemes">
            <summary>
            Gets a list of all of default metro themes.
            </summary>
        </member>
        <member name="E:MahApps.Metro.ThemeManager.IsThemeChanged">
            <summary>
            This event fires if accent color and theme was changed
            this should be using the weak event pattern, but for now it's enough
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
